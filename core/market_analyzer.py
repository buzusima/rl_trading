# core/market_analyzer.py - ‡∏£‡∏∞‡∏ö‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ï‡∏•‡∏≤‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö AI Recovery Intelligence

import numpy as np
import pandas as pd
from datetime import datetime, time
from typing import Dict, List, Optional, Tuple
from dataclasses import dataclass
from enum import Enum

class MarketRegime(Enum):
    """
    üìä ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏†‡∏≤‡∏ß‡∏∞‡∏ï‡∏•‡∏≤‡∏î - ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ï‡∏•‡∏≤‡∏î
    """
    TRENDING_UP = "trending_up"      # ‡∏ï‡∏•‡∏≤‡∏î‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå‡∏Ç‡∏∂‡πâ‡∏ô
    TRENDING_DOWN = "trending_down"  # ‡∏ï‡∏•‡∏≤‡∏î‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå‡∏•‡∏á
    RANGING = "ranging"              # ‡∏ï‡∏•‡∏≤‡∏î‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á
    HIGH_VOLATILITY = "high_vol"     # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô‡∏™‡∏π‡∏á
    LOW_VOLATILITY = "low_vol"       # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô‡∏ï‡πà‡∏≥
    NEWS_IMPACT = "news"             # ‡∏°‡∏µ‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏Ç‡πà‡∏≤‡∏ß

class TradingSession(Enum):
    """
    üåè ‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡∏•‡∏≤‡∏î - ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡πà‡∏ß‡∏á‡∏°‡∏µ‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô
    """
    ASIAN = "asian"          # 02:00-10:00 GMT (‡πÄ‡∏á‡∏µ‡∏¢‡∏ö)
    LONDON = "london"        # 08:00-17:00 GMT (‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô)
    NEW_YORK = "new_york"    # 13:00-22:00 GMT (‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏™‡∏π‡∏á)
    OVERLAP = "overlap"      # 13:00-17:00 GMT (‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î)
    QUIET = "quiet"          # ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏á‡∏µ‡∏¢‡∏ö

@dataclass
class MarketContext:
    """
    üìà ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏ï‡∏•‡∏≤‡∏î‡∏£‡∏ß‡∏° - ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    """
    regime: MarketRegime                    # ‡∏™‡∏†‡∏≤‡∏ß‡∏∞‡∏ï‡∏•‡∏≤‡∏î‡∏´‡∏•‡∏±‡∏Å
    session: TradingSession                 # ‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡∏•‡∏≤‡∏î
    volatility_score: float                 # ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô (0-100)
    trend_strength: float                   # ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏Å‡∏£‡πà‡∏á‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå (-100 ‡∏ñ‡∏∂‡∏á 100)
    volume_profile: str                     # ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì (low/medium/high)
    news_impact_level: int                  # ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏Ç‡πà‡∏≤‡∏ß (0-3)
    recommended_strategies: List[str]       # ‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
    confidence_score: float                 # ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå (0-1)
    timestamp: datetime                     # ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå

class MarketAnalyzer:
    """
    üß† ‡∏ï‡∏±‡∏ß‡∏ß‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ï‡∏•‡∏≤‡∏î‡∏´‡∏•‡∏±‡∏Å - ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏†‡∏≤‡∏ß‡∏∞‡∏ï‡∏•‡∏≤‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ AI ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå
    
    ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏´‡∏•‡∏±‡∏Å:
    1. ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô‡∏ï‡∏•‡∏≤‡∏î
    2. ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏Å‡∏£‡πà‡∏á
    3. ‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡∏•‡∏≤‡∏î
    4. ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏Ç‡πà‡∏≤‡∏ß
    5. ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
    """
    
    def __init__(self, mt5_interface=None, config: Dict = None):
        """
        üèóÔ∏è ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ï‡∏•‡∏≤‡∏î
        
        ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà:
        - ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
        - ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
        - ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏ï‡πà‡∏≤‡∏á‡πÜ
        """
        print("üß† Initializing Market Analyzer...")
        
        self.mt5_interface = mt5_interface
        self.config = config or {}
        
        # ‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô
        self.volatility_periods = {
            'short': 14,    # ‡∏£‡∏∞‡∏¢‡∏∞‡∏™‡∏±‡πâ‡∏ô (14 ‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô)
            'medium': 50,   # ‡∏£‡∏∞‡∏¢‡∏∞‡∏Å‡∏•‡∏≤‡∏á (50 ‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô)  
            'long': 200     # ‡∏£‡∏∞‡∏¢‡∏∞‡∏¢‡∏≤‡∏ß (200 ‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô)
        }
        
        # ‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô (ATR ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤)
        self.volatility_thresholds = {
            'low': 0.5,     # < 0.5% = ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô‡∏ï‡πà‡∏≥
            'medium': 1.0,  # 0.5-1.0% = ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥
            'high': 1.5     # > 1.5% = ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô‡∏™‡∏π‡∏á
        }
        
        # ‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏Å‡∏£‡πà‡∏á‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå
        self.trend_thresholds = {
            'weak': 0.3,    # < 0.3 = ‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå‡∏≠‡∏¢‡πà‡∏≠‡∏¢
            'medium': 0.6,  # 0.3-0.6 = ‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á
            'strong': 0.8   # > 0.8 = ‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏Å‡∏£‡πà‡∏á
        }
        
        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡∏•‡∏≤‡∏î (GMT)
        self.session_times = {
            TradingSession.ASIAN: (time(2, 0), time(10, 0)),
            TradingSession.LONDON: (time(8, 0), time(17, 0)),
            TradingSession.NEW_YORK: (time(13, 0), time(22, 0)),
            TradingSession.OVERLAP: (time(13, 0), time(17, 0))
        }
        
        # Cache ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
        self.analysis_cache = {}
        self.cache_duration = 300  # ‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏Ñ‡∏ä 5 ‡∏ô‡∏≤‡∏ó‡∏µ
        
        print("‚úÖ Market Analyzer initialized successfully")

    def analyze_market(self, symbol: str = "XAUUSD") -> MarketContext:
        """
        üìä ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ï‡∏•‡∏≤‡∏î‡∏£‡∏ß‡∏° - ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏†‡∏≤‡∏ß‡∏∞‡∏ï‡∏•‡∏≤‡∏î
        
        ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà:
        1. ‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏•‡∏≤‡∏î‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        2. ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÉ‡∏ô‡∏°‡∏¥‡∏ï‡∏¥‡∏ï‡πà‡∏≤‡∏á‡πÜ
        3. ‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏ï‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
        4. ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
        
        Returns:
            MarketContext: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏£‡∏ö‡∏ä‡∏∏‡∏î
        """
        try:
            print(f"üìä Analyzing market for {symbol}...")
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏Ñ‡∏ä
            cache_key = f"{symbol}_{int(datetime.now().timestamp() // self.cache_duration)}"
            if cache_key in self.analysis_cache:
                print("üíæ Using cached analysis")
                return self.analysis_cache[cache_key]
            
            # ‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
            market_data = self._get_market_data(symbol)
            if not market_data:
                return self._create_default_context()
            
            # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏°‡∏¥‡∏ï‡∏¥
            volatility_analysis = self._analyze_volatility(market_data)
            trend_analysis = self._analyze_trend(market_data)
            session_analysis = self._analyze_session()
            volume_analysis = self._analyze_volume(market_data)
            news_analysis = self._analyze_news_impact()
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏ï‡∏•‡∏≤‡∏î‡∏£‡∏ß‡∏°
            market_context = self._synthesize_context(
                volatility_analysis,
                trend_analysis,
                session_analysis,
                volume_analysis,
                news_analysis
            )
            
            # ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå
            market_context.recommended_strategies = self._recommend_strategies(market_context)
            
            # ‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏Ñ‡∏ä
            self.analysis_cache[cache_key] = market_context
            
            print(f"‚úÖ Market analysis complete: {market_context.regime.value}")
            return market_context
            
        except Exception as e:
            print(f"‚ùå Market analysis error: {e}")
            return self._create_default_context()


    def _get_market_data(self, symbol: str) -> Optional[Dict]:
        """
        üìà ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏•‡∏≤‡∏î - Real-time Version (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß)
        """
        try:
            if not self.mt5_interface:
                print("‚ö†Ô∏è No MT5 interface available")
                return None
            
            # üî• ‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏à‡∏≤‡∏Å 200 ‚Üí 50 ‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô
            required_candles = 50  # ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà 200
            min_acceptable = 15    # ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà 50
            
            print(f"üìä Requesting {required_candles} candles for {symbol}...")
            
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô M5
            rates = self.mt5_interface.get_rates(symbol, 5, required_candles)
            
            # üî• ‡∏ú‡πà‡∏≠‡∏ô‡∏õ‡∏£‡∏ô‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç
            if not rates:
                print("‚ùå No rates data received from MT5")
                return None
                
            actual_candles = len(rates)
            print(f"üìä Received {actual_candles} candles")
            
            if actual_candles < min_acceptable:
                print(f"‚ùå Insufficient data: {actual_candles} candles (need {min_acceptable}+ minimum)")
                return None
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            if actual_candles < required_candles:
                print(f"‚ö†Ô∏è Limited data: {actual_candles}/{required_candles} candles (acceptable)")
            else:
                print(f"‚úÖ Sufficient data: {actual_candles} candles")
            
            # ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            current_price = self.mt5_interface.get_current_price(symbol)
            if not current_price:
                print("‚ùå Cannot get current price")
                return None
            
            print(f"üí∞ Current price: ${current_price['bid']:.2f}")
            
            # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô DataFrame
            df = pd.DataFrame(rates)
            df['time'] = pd.to_datetime(df['time'], unit='s')
            
            # üî• ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì indicators ‡πÅ‡∏ö‡∏ö flexible
            df = self._calculate_basic_indicators(df)
            
            return {
                'rates': rates,
                'dataframe': df,
                'current_price': current_price,
                'symbol': symbol,
                'data_quality': len(df)
            }
            
        except Exception as e:
            print(f"‚ùå Get market data error: {e}")
            return None
    
    def _calculate_basic_indicators(self, df: pd.DataFrame) -> pd.DataFrame:
        """
        üìä ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Technical Indicators ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
        
        ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà:
        1. ATR (Average True Range) - ‡∏ß‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô
        2. SMA/EMA - ‡∏ß‡∏±‡∏î‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå
        3. RSI - ‡∏ß‡∏±‡∏î momentum
        4. Bollinger Bands - ‡∏ß‡∏±‡∏î‡∏ä‡πà‡∏ß‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤
        """
        try:
            data_length = len(df)
            print(f"üìä Calculating indicators with {data_length} candles")
            
            if data_length < 5:
                print("‚ö†Ô∏è Very limited data - using basic calculations")
                return df
            
            # üî• ‡∏õ‡∏£‡∏±‡∏ö periods ‡∏ï‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ
            atr_period = min(14, max(3, data_length - 2))
            sma20_period = min(20, max(5, data_length - 2))
            sma50_period = min(50, max(10, data_length - 2))
            rsi_period = min(14, max(5, data_length - 2))
            bb_period = min(20, max(5, data_length - 2))
            
            print(f"üìä Using periods - ATR:{atr_period}, SMA20:{sma20_period}, SMA50:{sma50_period}")
            
            # ATR (Average True Range)
            try:
                df['high_low'] = df['high'] - df['low']
                df['high_close'] = abs(df['high'] - df['close'].shift())
                df['low_close'] = abs(df['low'] - df['close'].shift())
                df['true_range'] = df[['high_low', 'high_close', 'low_close']].max(axis=1)
                df['atr_14'] = df['true_range'].rolling(atr_period).mean()
                print(f"‚úÖ ATR calculated (period: {atr_period})")
            except Exception as e:
                print(f"‚ö†Ô∏è ATR calculation error: {e}")
                # Simple fallback
                df['atr_14'] = df['high'] - df['low']
            
            # Moving Averages
            try:
                df['sma_20'] = df['close'].rolling(sma20_period).mean()
                print(f"‚úÖ SMA20 calculated (period: {sma20_period})")
            except Exception as e:
                print(f"‚ö†Ô∏è SMA20 calculation error: {e}")
                
            try:
                df['sma_50'] = df['close'].rolling(sma50_period).mean()
                print(f"‚úÖ SMA50 calculated (period: {sma50_period})")
            except Exception as e:
                print(f"‚ö†Ô∏è SMA50 calculation error: {e}")
            
            # EMA
            try:
                ema12_span = min(12, max(3, data_length // 2))
                ema26_span = min(26, max(5, data_length - 1))
                df['ema_12'] = df['close'].ewm(span=ema12_span).mean()
                df['ema_26'] = df['close'].ewm(span=ema26_span).mean()
                print(f"‚úÖ EMA calculated (spans: {ema12_span}, {ema26_span})")
            except Exception as e:
                print(f"‚ö†Ô∏è EMA calculation error: {e}")
            
            # RSI
            try:
                if data_length >= 10:
                    delta = df['close'].diff()
                    gain = delta.where(delta > 0, 0).rolling(rsi_period).mean()
                    loss = -delta.where(delta < 0, 0).rolling(rsi_period).mean()
                    rs = gain / loss
                    df['rsi'] = 100 - (100 / (1 + rs))
                    print(f"‚úÖ RSI calculated (period: {rsi_period})")
            except Exception as e:
                print(f"‚ö†Ô∏è RSI calculation error: {e}")
            
            # Bollinger Bands
            try:
                df['bb_middle'] = df['close'].rolling(bb_period).mean()
                bb_std = df['close'].rolling(bb_period).std()
                df['bb_upper'] = df['bb_middle'] + (2 * bb_std)
                df['bb_lower'] = df['bb_middle'] - (2 * bb_std)
                print(f"‚úÖ Bollinger Bands calculated (period: {bb_period})")
            except Exception as e:
                print(f"‚ö†Ô∏è Bollinger Bands calculation error: {e}")
            
            print(f"‚úÖ Indicators calculation completed")
            return df
            
        except Exception as e:
            print(f"‚ùå Calculate indicators error: {e}")
            return df

    def _analyze_volatility(self, market_data: Dict) -> Dict:
        """
        üìà ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô - ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏ï‡∏•‡∏≤‡∏î
        
        ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà:
        1. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì ATR ‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå
        2. ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢
        3. ‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô
        4. ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô
        """
        try:
            df = market_data['dataframe']
            current_price = market_data['current_price']['bid']
            
            # ATR ‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            current_atr = df['atr_14'].iloc[-1]
            atr_percentage = (current_atr / current_price) * 100
            
            # ATR ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ 50 ‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô
            atr_mean_50 = df['atr_14'].tail(50).mean()
            atr_mean_percentage = (atr_mean_50 / current_price) * 100
            
            # ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥
            volatility_ratio = atr_percentage / max(atr_mean_percentage, 0.1)
            
            # ‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏£‡∏∞‡∏î‡∏±‡∏ö
            if atr_percentage < self.volatility_thresholds['low']:
                level = "LOW"
                score = 25
            elif atr_percentage < self.volatility_thresholds['medium']:
                level = "MEDIUM"
                score = 50
            elif atr_percentage < self.volatility_thresholds['high']:
                level = "HIGH"
                score = 75
            else:
                level = "EXTREME"
                score = 100
            
            # ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏° (ATR ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏î‡∏•‡∏á)
            atr_trend = "INCREASING" if current_atr > atr_mean_50 else "DECREASING"
            
            return {
                'level': level,
                'score': score,
                'atr_percentage': atr_percentage,
                'volatility_ratio': volatility_ratio,
                'trend': atr_trend,
                'current_atr': current_atr
            }
            
        except Exception as e:
            print(f"‚ùå Volatility analysis error: {e}")
            return {'level': 'UNKNOWN', 'score': 50, 'atr_percentage': 1.0, 'volatility_ratio': 1.0, 'trend': 'STABLE'}

    def _analyze_trend(self, market_data: Dict) -> Dict:
        """
        üìà ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå - ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏Å‡∏£‡πà‡∏á‡∏Ç‡∏≠‡∏á‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå
        
        ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà:
        1. ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Å‡∏±‡∏ö SMA/EMA
        2. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì slope ‡∏Ç‡∏≠‡∏á moving average
        3. ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏Å‡∏£‡πà‡∏á‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå
        4. ‡∏£‡∏∞‡∏ö‡∏∏‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏Å
        """
        try:
            df = market_data['dataframe']
            current_close = df['close'].iloc[-1]
            
            # ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö Moving Averages
            sma_20 = df['sma_20'].iloc[-1]
            sma_50 = df['sma_50'].iloc[-1]
            ema_12 = df['ema_12'].iloc[-1]
            ema_26 = df['ema_26'].iloc[-1]
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å MA (‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå)
            distance_sma20 = ((current_close - sma_20) / sma_20) * 100
            distance_sma50 = ((current_close - sma_50) / sma_50) * 100
            
            # Slope ‡∏Ç‡∏≠‡∏á SMA (‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏±‡∏ô‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á 10 ‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô)
            sma20_slope = (df['sma_20'].iloc[-1] - df['sma_20'].iloc[-10]) / df['sma_20'].iloc[-10] * 100
            sma50_slope = (df['sma_50'].iloc[-1] - df['sma_50'].iloc[-10]) / df['sma_50'].iloc[-10] * 100
            
            # MACD ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö confirm trend
            macd_line = ema_12 - ema_26
            macd_signal = df['ema_12'].ewm(span=9).mean().iloc[-1] - df['ema_26'].ewm(span=9).mean().iloc[-1]
            macd_histogram = macd_line - macd_signal
            
            # ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á
            bullish_signals = 0
            bearish_signals = 0
            
            if current_close > sma_20: bullish_signals += 1
            else: bearish_signals += 1
            
            if current_close > sma_50: bullish_signals += 1
            else: bearish_signals += 1
            
            if sma20_slope > 0: bullish_signals += 1
            else: bearish_signals += 1
            
            if sma50_slope > 0: bullish_signals += 1
            else: bearish_signals += 1
            
            if macd_histogram > 0: bullish_signals += 1
            else: bearish_signals += 1
            
            # ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏Å‡∏£‡πà‡∏á
            total_signals = bullish_signals + bearish_signals
            trend_strength = abs(bullish_signals - bearish_signals) / total_signals
            
            # ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏Å
            if bullish_signals > bearish_signals:
                direction = "BULLISH"
                strength_score = (bullish_signals / total_signals) * 100
            elif bearish_signals > bullish_signals:
                direction = "BEARISH"
                strength_score = (bearish_signals / total_signals) * 100
            else:
                direction = "SIDEWAYS"
                strength_score = 50
            
            # ‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏Å‡∏£‡πà‡∏á
            if trend_strength < self.trend_thresholds['weak']:
                strength = "WEAK"
            elif trend_strength < self.trend_thresholds['medium']:
                strength = "MEDIUM"  
            else:
                strength = "STRONG"
            
            return {
                'direction': direction,
                'strength': strength,
                'strength_score': strength_score,
                'trend_strength': trend_strength,
                'distance_sma20': distance_sma20,
                'distance_sma50': distance_sma50,
                'sma20_slope': sma20_slope,
                'sma50_slope': sma50_slope,
                'macd_histogram': macd_histogram
            }
            
        except Exception as e:
            print(f"‚ùå Trend analysis error: {e}")
            return {'direction': 'SIDEWAYS', 'strength': 'WEAK', 'strength_score': 50, 'trend_strength': 0}

    def _analyze_session(self) -> Dict:
        """
        üåè ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡∏•‡∏≤‡∏î - ‡∏£‡∏∞‡∏ö‡∏∏ session ‡πÅ‡∏•‡∏∞‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î
        
        ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà:
        1. ‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡∏•‡∏≤‡∏î‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        2. ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ session
        3. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏ô‡∏ñ‡∏∂‡∏á session ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
        4. ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏ï‡∏≤‡∏° session
        """
        try:
            now_gmt = datetime.utcnow().time()
            current_session = TradingSession.QUIET  # default
            
            # ‡∏£‡∏∞‡∏ö‡∏∏ session ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            for session, (start_time, end_time) in self.session_times.items():
                if start_time <= now_gmt <= end_time:
                    current_session = session
                    break
            
            # ‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ session
            session_characteristics = {
                TradingSession.ASIAN: {
                    'volume': 'LOW',
                    'volatility': 'LOW',
                    'preferred_strategies': ['conservative', 'ranging'],
                    'risk_level': 'LOW'
                },
                TradingSession.LONDON: {
                    'volume': 'HIGH',
                    'volatility': 'HIGH',
                    'preferred_strategies': ['breakout', 'trend_following'],
                    'risk_level': 'MEDIUM'
                },
                TradingSession.NEW_YORK: {
                    'volume': 'HIGH',
                    'volatility': 'MEDIUM',
                    'preferred_strategies': ['momentum', 'news_trading'],
                    'risk_level': 'MEDIUM'
                },
                TradingSession.OVERLAP: {
                    'volume': 'HIGHEST',
                    'volatility': 'HIGHEST',
                    'preferred_strategies': ['aggressive', 'scalping'],
                    'risk_level': 'HIGH'
                },
                TradingSession.QUIET: {
                    'volume': 'LOWEST',
                    'volatility': 'LOWEST',
                    'preferred_strategies': ['conservative', 'hold'],
                    'risk_level': 'LOWEST'
                }
            }
            
            current_char = session_characteristics[current_session]
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏ñ‡∏∂‡∏á session ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
            next_session_info = self._calculate_next_major_session()
            
            return {
                'current_session': current_session.value,
                'volume_level': current_char['volume'],
                'volatility_expectation': current_char['volatility'],
                'preferred_strategies': current_char['preferred_strategies'],
                'risk_level': current_char['risk_level'],
                'next_major_session': next_session_info,
                'gmt_time': now_gmt.strftime('%H:%M')
            }
            
        except Exception as e:
            print(f"‚ùå Session analysis error: {e}")
            return {
                'current_session': 'unknown',
                'volume_level': 'MEDIUM',
                'volatility_expectation': 'MEDIUM',
                'preferred_strategies': ['conservative'],
                'risk_level': 'MEDIUM'
            }

    def _analyze_volume(self, market_data: Dict) -> Dict:
        """
        üìä ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î - ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡πÅ‡∏•‡∏∞‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°
        
        ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà:
        1. ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Å‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢
        2. ‡∏£‡∏∞‡∏ö‡∏∏‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì
        3. ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡∏£‡∏≤‡∏Ñ‡∏≤
        4. ‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì
        """
        try:
            df = market_data['dataframe']
            
            # ‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢
            recent_volume = df['tick_volume'].tail(10).mean()  # 10 ‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
            average_volume = df['tick_volume'].tail(50).mean()  # 50 ‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢
            
            # ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì
            volume_ratio = recent_volume / max(average_volume, 1)
            
            # ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì
            volume_trend_short = df['tick_volume'].tail(5).mean() / df['tick_volume'].tail(10).mean()
            
            # ‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏£‡∏∞‡∏î‡∏±‡∏ö
            if volume_ratio < 0.7:
                level = "LOW"
                score = 25
            elif volume_ratio < 1.3:
                level = "NORMAL"
                score = 50
            elif volume_ratio < 2.0:
                level = "HIGH"
                score = 75
            else:
                level = "VERY_HIGH"
                score = 100
            
            # ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°
            if volume_trend_short > 1.1:
                trend = "INCREASING"
            elif volume_trend_short < 0.9:
                trend = "DECREASING"
            else:
                trend = "STABLE"
            
            return {
                'level': level,
                'score': score,
                'volume_ratio': volume_ratio,
                'trend': trend,
                'recent_vs_average': volume_ratio
            }
            
        except Exception as e:
            print(f"‚ùå Volume analysis error: {e}")
            return {'level': 'NORMAL', 'score': 50, 'volume_ratio': 1.0, 'trend': 'STABLE'}

    def _analyze_news_impact(self) -> Dict:
        """
        üì∞ ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏Ç‡πà‡∏≤‡∏ß - ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏Ç‡πà‡∏≤‡∏ß‡πÄ‡∏®‡∏£‡∏©‡∏ê‡∏Å‡∏¥‡∏à
        
        ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà:
        1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
        2. ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö
        3. ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå
        4. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ç‡πà‡∏≤‡∏ß‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
        
        Note: ‡πÉ‡∏ô‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢
        """
        try:
            current_hour_gmt = datetime.utcnow().hour
            
            # ‡πÄ‡∏ß‡∏•‡∏≤‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç (GMT)
            high_impact_hours = [8, 9, 13, 14, 15]  # London open, US data, US open
            medium_impact_hours = [1, 2, 10, 11, 16, 17]  # Asian data, other sessions
            
            # ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö
            if current_hour_gmt in high_impact_hours:
                impact_level = 3  # ‡∏™‡∏π‡∏á
                risk_adjustment = "INCREASE_CAUTION"
                recommended_action = "WAIT_OR_CONSERVATIVE"
            elif current_hour_gmt in medium_impact_hours:
                impact_level = 2  # ‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á
                risk_adjustment = "SLIGHT_CAUTION"
                recommended_action = "NORMAL_WITH_STOPS"
            else:
                impact_level = 1  # ‡∏ï‡πà‡∏≥
                risk_adjustment = "NORMAL"
                recommended_action = "NORMAL_TRADING"
            
            # ‡πÄ‡∏ß‡∏•‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
            next_high_impact = self._find_next_impact_hour(high_impact_hours)
            
            return {
                'impact_level': impact_level,
                'risk_adjustment': risk_adjustment,
                'recommended_action': recommended_action,
                'next_high_impact_hour': next_high_impact,
                'current_hour_gmt': current_hour_gmt
            }
            
        except Exception as e:
            print(f"‚ùå News analysis error: {e}")
            return {
                'impact_level': 1,
                'risk_adjustment': 'NORMAL',
                'recommended_action': 'NORMAL_TRADING'
            }

    def _synthesize_context(self, volatility: Dict, trend: Dict, session: Dict, 
                           volume: Dict, news: Dict) -> MarketContext:
        """
        üß© ‡∏£‡∏ß‡∏°‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏ï‡∏•‡∏≤‡∏î - ‡∏™‡∏±‡∏á‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
        
        ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà:
        1. ‡∏£‡∏ß‡∏°‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å‡∏°‡∏¥‡∏ï‡∏¥
        2. ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏™‡∏†‡∏≤‡∏ß‡∏∞‡∏ï‡∏•‡∏≤‡∏î‡∏´‡∏•‡∏±‡∏Å
        3. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô
        4. ‡∏™‡∏£‡πâ‡∏≤‡∏á MarketContext ‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå
        """
        try:
            # ‡∏£‡∏∞‡∏ö‡∏∏‡∏™‡∏†‡∏≤‡∏ß‡∏∞‡∏ï‡∏•‡∏≤‡∏î‡∏´‡∏•‡∏±‡∏Å
            regime = self._determine_market_regime(volatility, trend, volume)
            
            # ‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡∏•‡∏≤‡∏î
            session_enum = getattr(TradingSession, session['current_session'].upper(), TradingSession.QUIET)
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°
            volatility_score = volatility['score']
            trend_score = trend['strength_score']
            volume_score = volume['score']
            
            # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ï‡∏≤‡∏°‡∏Ç‡πà‡∏≤‡∏ß
            news_multiplier = {1: 1.0, 2: 0.8, 3: 0.6}[news['impact_level']]
            adjusted_confidence = (volatility_score + trend_score + volume_score) / 3 * news_multiplier / 100
            
            # ‡∏£‡∏∞‡∏ö‡∏∏‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î
            volume_profile = volume['level'].lower()
            
            context = MarketContext(
                regime=regime,
                session=session_enum,
                volatility_score=volatility_score,
                trend_strength=trend['strength_score'],
                volume_profile=volume_profile,
                news_impact_level=news['impact_level'],
                recommended_strategies=[],  # ‡∏à‡∏∞‡πÄ‡∏ï‡∏¥‡∏°‡πÉ‡∏ô _recommend_strategies
                confidence_score=max(0.1, min(1.0, adjusted_confidence)),
                timestamp=datetime.now()
            )
            
            return context
            
        except Exception as e:
            print(f"‚ùå Context synthesis error: {e}")
            return self._create_default_context()

    def _determine_market_regime(self, volatility: Dict, trend: Dict, volume: Dict) -> MarketRegime:
        """
        üéØ ‡∏£‡∏∞‡∏ö‡∏∏‡∏™‡∏†‡∏≤‡∏ß‡∏∞‡∏ï‡∏•‡∏≤‡∏î‡∏´‡∏•‡∏±‡∏Å - ‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏ï‡∏•‡∏≤‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ï‡πà‡∏≤‡∏á‡πÜ
        
        ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà:
        1. ‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô ‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå ‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì
        2. ‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏ï‡∏•‡∏≤‡∏î‡∏ï‡∏≤‡∏°‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏´‡∏•‡∏±‡∏Å
        3. ‡πÉ‡∏ä‡πâ logic rules ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à
        """
        try:
            vol_level = volatility['level']
            trend_direction = trend['direction']
            trend_strength = trend['strength']
            volume_level = volume['level']
            
            # High/Low Volatility Regimes
            if vol_level in ['EXTREME', 'HIGH']:
                if volume_level in ['HIGH', 'VERY_HIGH']:
                    return MarketRegime.HIGH_VOLATILITY
                else:
                    return MarketRegime.NEWS_IMPACT
            
            # Low Volatility
            elif vol_level == 'LOW':
                if trend_strength == 'WEAK':
                    return MarketRegime.LOW_VOLATILITY
                else:
                    return MarketRegime.RANGING
            
            # Trending Markets
            elif trend_direction == 'BULLISH' and trend_strength in ['MEDIUM', 'STRONG']:
                return MarketRegime.TRENDING_UP
            elif trend_direction == 'BEARISH' and trend_strength in ['MEDIUM', 'STRONG']:
                return MarketRegime.TRENDING_DOWN
            
            # Default to ranging
            else:
                return MarketRegime.RANGING
                
        except Exception as e:
            print(f"‚ùå Regime determination error: {e}")
            return MarketRegime.RANGING

    def _recommend_strategies(self, context: MarketContext) -> List[str]:
        """
        üí° ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ - ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡∏±‡∏ö‡∏™‡∏†‡∏≤‡∏ß‡∏∞‡∏ï‡∏•‡∏≤‡∏î
        
        ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà:
        1. ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå context ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        2. ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏Å‡∏±‡∏ö‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
        3. ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
        4. ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå
        """
        try:
            recommendations = []
            
            # ‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏ï‡∏≤‡∏° Market Regime
            regime_strategies = {
                MarketRegime.TRENDING_UP: ['momentum_recovery', 'breakout_recovery', 'conservative_martingale'],
                MarketRegime.TRENDING_DOWN: ['mean_reversion', 'hedging_recovery', 'conservative_martingale'],
                MarketRegime.RANGING: ['aggressive_grid', 'mean_reversion', 'hedging_recovery'],
                MarketRegime.HIGH_VOLATILITY: ['emergency_recovery', 'hedging_recovery', 'news_based'],
                MarketRegime.LOW_VOLATILITY: ['aggressive_grid', 'conservative_martingale', 'momentum_recovery'],
                MarketRegime.NEWS_IMPACT: ['news_based', 'emergency_recovery', 'hedging_recovery']
            }
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏ï‡∏≤‡∏° regime
            if context.regime in regime_strategies:
                recommendations.extend(regime_strategies[context.regime])
            
            # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏° session
            session_preferences = {
                TradingSession.ASIAN: ['conservative_martingale', 'aggressive_grid'],
                TradingSession.LONDON: ['breakout_recovery', 'momentum_recovery'],
                TradingSession.NEW_YORK: ['news_based', 'momentum_recovery'],
                TradingSession.OVERLAP: ['aggressive_grid', 'momentum_recovery'],
                TradingSession.QUIET: ['conservative_martingale', 'hedging_recovery']
            }
            
            if context.session in session_preferences:
                session_recs = session_preferences[context.session]
                # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå session ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥
                for strategy in session_recs:
                    if strategy not in recommendations:
                        recommendations.append(strategy)
            
            # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ç‡πà‡∏≤‡∏ß
            if context.news_impact_level >= 3:
                # ‡∏Ç‡πà‡∏≤‡∏ß‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏™‡∏π‡∏á - ‡πÉ‡∏ä‡πâ‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏£‡∏∞‡∏°‡∏±‡∏î‡∏£‡∏∞‡∏ß‡∏±‡∏á
                safe_strategies = ['emergency_recovery', 'hedging_recovery', 'conservative_martingale']
                recommendations = [s for s in recommendations if s in safe_strategies] + safe_strategies
            
            # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô
            if context.volatility_score >= 80:
                # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô‡∏™‡∏π‡∏á‡∏°‡∏≤‡∏Å - ‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏Å‡πâ‡∏≤‡∏ß‡∏£‡πâ‡∏≤‡∏ß
                risky_strategies = ['aggressive_grid', 'momentum_recovery']
                recommendations = [s for s in recommendations if s not in risky_strategies]
            
            # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏° confidence
            if context.confidence_score < 0.5:
                # ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô‡∏ï‡πà‡∏≥ - ‡πÉ‡∏ä‡πâ‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
                recommendations = ['conservative_martingale', 'hedging_recovery', 'emergency_recovery']
            
            # ‡∏•‡∏ö duplicate ‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô
            unique_recommendations = []
            for strategy in recommendations:
                if strategy not in unique_recommendations:
                    unique_recommendations.append(strategy)
            
            # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ top 3 strategies
            return unique_recommendations[:3] if unique_recommendations else ['conservative_martingale']
            
        except Exception as e:
            print(f"‚ùå Strategy recommendation error: {e}")
            return ['conservative_martingale']

    def _calculate_next_major_session(self) -> Dict:
        """
        ‚è∞ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì session ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ - ‡∏´‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡∏ñ‡∏∂‡∏á session ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
        
        ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà:
        1. ‡∏´‡∏≤ session ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏™‡∏π‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
        2. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠
        3. ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ï‡∏±‡∏ß
        """
        try:
            now_gmt = datetime.utcnow()
            current_time = now_gmt.time()
            
            # Major sessions ‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤
            major_sessions = [
                ('LONDON_OPEN', time(8, 0)),
                ('LONDON_CLOSE', time(17, 0)),
                ('NY_OPEN', time(13, 0)),
                ('NY_CLOSE', time(22, 0))
            ]
            
            # ‡∏´‡∏≤ session ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
            for session_name, session_time in major_sessions:
                if current_time < session_time:
                    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠
                    today = now_gmt.date()
                    session_datetime = datetime.combine(today, session_time)
                    time_to_session = session_datetime - now_gmt
                    
                    return {
                        'session': session_name,
                        'time': session_time.strftime('%H:%M GMT'),
                        'minutes_remaining': int(time_to_session.total_seconds() / 60)
                    }
            
            # ‡∏ñ‡πâ‡∏≤‡∏ú‡πà‡∏≤‡∏ô‡∏ó‡∏∏‡∏Å session ‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡∏î‡∏π session ‡πÅ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
            tomorrow = now_gmt.date() + pd.Timedelta(days=1)
            london_open = datetime.combine(tomorrow, time(8, 0))
            time_to_session = london_open - now_gmt
            
            return {
                'session': 'LONDON_OPEN_TOMORROW',
                'time': '08:00 GMT (Tomorrow)',
                'minutes_remaining': int(time_to_session.total_seconds() / 60)
            }
            
        except Exception as e:
            print(f"‚ùå Next session calculation error: {e}")
            return {'session': 'UNKNOWN', 'time': 'UNKNOWN', 'minutes_remaining': 0}

    def _find_next_impact_hour(self, impact_hours: List[int]) -> int:
        """
        üìÖ ‡∏´‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡∏Ç‡πà‡∏≤‡∏ß‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏™‡∏π‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
        
        ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà:
        - ‡∏´‡∏≤‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πà‡∏≤‡∏ß‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏™‡∏π‡∏á
        - ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á GMT
        """
        try:
            current_hour = datetime.utcnow().hour
            
            # ‡∏´‡∏≤‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
            for hour in sorted(impact_hours):
                if hour > current_hour:
                    return hour
            
            # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡πÅ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
            return min(impact_hours)
            
        except Exception as e:
            print(f"‚ùå Next impact hour error: {e}")
            return 8  # Default London open

    def _create_default_context(self) -> MarketContext:
        """
        üîß ‡∏™‡∏£‡πâ‡∏≤‡∏á Context ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô - ‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÑ‡∏î‡πâ
        
        ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà:
        - ‡∏™‡∏£‡πâ‡∏≤‡∏á MarketContext ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
        - ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏°‡∏±‡∏î‡∏£‡∏∞‡∏ß‡∏±‡∏á
        """
        return MarketContext(
            regime=MarketRegime.RANGING,
            session=TradingSession.QUIET,
            volatility_score=50.0,
            trend_strength=50.0,
            volume_profile="normal",
            news_impact_level=1,
            recommended_strategies=['conservative_martingale'],
            confidence_score=0.3,
            timestamp=datetime.now()
        )

    def get_quick_analysis(self, symbol: str = "XAUUSD") -> str:
        """
        ‚ö° ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ö‡∏ö‡∏¢‡πà‡∏≠ - ‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÅ‡∏ö‡∏ö‡∏™‡∏±‡πâ‡∏ô‡πÜ
        
        ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà:
        1. ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ï‡∏•‡∏≤‡∏î‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡πá‡∏ß
        2. ‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡πâ‡∏ô‡πÜ
        3. ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö log ‡∏´‡∏£‡∏∑‡∏≠ display
        """
        try:
            context = self.analyze_market(symbol)
            
            summary = (f"üìä Market: {context.regime.value.upper()} | "
                      f"Session: {context.session.value.upper()} | "
                      f"Vol: {context.volatility_score:.0f} | "
                      f"Trend: {context.trend_strength:.0f} | "
                      f"Strategy: {context.recommended_strategies[0] if context.recommended_strategies else 'conservative'}")
            
            return summary
            
        except Exception as e:
            return f"‚ùå Quick analysis error: {e}"

    def clear_cache(self):
        """
        üóëÔ∏è ‡∏•‡πâ‡∏≤‡∏á‡πÅ‡∏Ñ‡∏ä - ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏Ñ‡∏ä‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        
        ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà:
        - ‡∏•‡πâ‡∏≤‡∏á‡πÅ‡∏Ñ‡∏ä‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
        - ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÉ‡∏´‡∏°‡πà‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
        """
        self.analysis_cache.clear()
        print("üóëÔ∏è Market analysis cache cleared")

# Helper function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢
def quick_market_check(mt5_interface, symbol="XAUUSD") -> MarketContext:
    """
    üöÄ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ï‡∏•‡∏≤‡∏î‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡πá‡∏ß
    
    Usage:
        context = quick_market_check(mt5_interface)
        print(f"Recommended strategy: {context.recommended_strategies[0]}")
    """
    analyzer = MarketAnalyzer(mt5_interface)
    return analyzer.analyze_market(symbol)