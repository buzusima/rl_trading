# core/strategy_selector.py - AI Strategy Selection System

import numpy as np
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple
from dataclasses import dataclass
from enum import Enum
import json

# Import ‡∏à‡∏≤‡∏Å market_analyzer
try:
    from .market_analyzer import MarketContext, MarketRegime, TradingSession
except ImportError:
    from market_analyzer import MarketContext, MarketRegime, TradingSession

class StrategyType(Enum):
    """
    üîÑ ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î 8 ‡πÅ‡∏ö‡∏ö
    """
    CONSERVATIVE_MARTINGALE = "conservative_martingale"    # ‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ‡πÅ‡∏ö‡∏ö‡∏£‡∏∞‡∏°‡∏±‡∏î‡∏£‡∏∞‡∏ß‡∏±‡∏á
    AGGRESSIVE_GRID = "aggressive_grid"                    # ‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ‡πÅ‡∏ö‡∏ö‡∏Å‡∏£‡∏¥‡∏î‡∏Å‡πâ‡∏≤‡∏ß‡∏£‡πâ‡∏≤‡∏ß
    HEDGING_RECOVERY = "hedging_recovery"                  # ‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ‡πÅ‡∏ö‡∏ö hedge
    BREAKOUT_RECOVERY = "breakout_recovery"                # ‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ‡πÅ‡∏ö‡∏ö breakout
    MEAN_REVERSION = "mean_reversion"                      # ‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ‡πÅ‡∏ö‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢
    MOMENTUM_RECOVERY = "momentum_recovery"                # ‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ‡πÅ‡∏ö‡∏ö momentum
    NEWS_BASED = "news_based"                             # ‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ‡∏ï‡∏≤‡∏°‡∏Ç‡πà‡∏≤‡∏ß
    EMERGENCY_RECOVERY = "emergency_recovery"              # ‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô

class RiskLevel(Enum):
    """
    ‚ö†Ô∏è ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå
    """
    VERY_LOW = 1      # ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ï‡πà‡∏≥‡∏°‡∏≤‡∏Å
    LOW = 2           # ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ï‡πà‡∏≥
    MEDIUM = 3        # ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á
    HIGH = 4          # ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏π‡∏á
    VERY_HIGH = 5     # ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏π‡∏á‡∏°‡∏≤‡∏Å

@dataclass
class StrategyConfig:
    """
    ‚öôÔ∏è ‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå - ‡πÄ‡∏Å‡πá‡∏ö‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå
    """
    strategy_type: StrategyType              # ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå
    risk_level: RiskLevel                    # ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á
    base_lot_multiplier: float               # ‡∏ï‡∏±‡∏ß‡∏Ñ‡∏π‡∏ì‡∏Ç‡∏ô‡∏≤‡∏î lot ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
    max_positions: int                       # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
    recovery_multiplier: float               # ‡∏ï‡∏±‡∏ß‡∏Ñ‡∏π‡∏ì‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ
    stop_loss_pips: Optional[int]            # Stop loss (pips)
    take_profit_pips: Optional[int]          # Take profit (pips)
    max_drawdown_threshold: float            # ‡πÄ‡∏Å‡∏ì‡∏ë‡πå drawdown ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î (%)
    suitable_regimes: List[MarketRegime]     # ‡∏™‡∏†‡∏≤‡∏ß‡∏∞‡∏ï‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
    suitable_sessions: List[TradingSession]  # ‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
    min_confidence: float                    # Confidence ‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ
    description: str                         # ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå

@dataclass  
class StrategySelection:
    """
    üéØ ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏ó‡∏µ‡πà AI ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    """
    primary_strategy: StrategyConfig         # ‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏´‡∏•‡∏±‡∏Å
    backup_strategy: StrategyConfig          # ‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏™‡∏≥‡∏£‡∏≠‡∏á
    confidence_score: float                  # ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (0-1)
    risk_adjustment: float                   # ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á (0.5-2.0)
    position_sizing: Dict[str, float]        # ‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
    market_context: MarketContext            # ‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏ï‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à
    selection_reasons: List[str]             # ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    warnings: List[str]                      # ‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏£‡∏£‡∏∞‡∏ß‡∏±‡∏á
    timestamp: datetime                      # ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å

class StrategySelector:
    """
    üß† ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞ - ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
    
    ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏´‡∏•‡∏±‡∏Å:
    1. ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå MarketContext ‡∏à‡∏≤‡∏Å MarketAnalyzer
    2. ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Å‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    3. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå
    4. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏´‡∏•‡∏±‡∏Å‡πÅ‡∏•‡∏∞‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
    5. ‡∏õ‡∏£‡∏±‡∏ö‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ï‡∏≤‡∏°‡∏™‡∏†‡∏≤‡∏ß‡∏∞‡∏ï‡∏•‡∏≤‡∏î
    6. ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡πÅ‡∏ö‡∏ö‡πÑ‡∏î‡∏ô‡∏≤‡∏°‡∏¥‡∏Å
    """
    
    def __init__(self, config: Dict = None):
        """
        üèóÔ∏è ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå
        
        ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà:
        - ‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        - ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à
        - ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏£‡∏∞‡∏ö‡∏ö scoring
        """
        print("üéØ Initializing Strategy Selector...")
        
        self.config = config or {}
        
        # ‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
        self.base_lot_size = self.config.get('lot_size', 0.01)
        self.max_daily_risk = self.config.get('max_daily_risk', 10.0)
        self.account_balance = self.config.get('balance', 10000.0)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        self.strategies = self._create_all_strategies()
        
        # ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå
        self.selection_history = []
        self.current_strategy = None
        self.strategy_performance = {}
        
        # ‡∏£‡∏∞‡∏ö‡∏ö scoring weights
        self.scoring_weights = {
            'regime_match': 0.25,      # ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö market regime
            'session_match': 0.20,     # ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö trading session  
            'risk_appetite': 0.20,     # ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á
            'confidence_level': 0.15,  # ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô‡∏Ç‡∏≠‡∏á market analysis
            'performance_history': 0.20 # ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡πÉ‡∏ô‡∏≠‡∏î‡∏µ‡∏ï
        }
        
        print("‚úÖ Strategy Selector initialized with 8 strategies")
        self._log_available_strategies()

    def _create_all_strategies(self) -> Dict[StrategyType, StrategyConfig]:
        """
        üè≠ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î - ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ó‡∏∏‡∏Å‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå
        
        ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà:
        1. ‡∏™‡∏£‡πâ‡∏≤‡∏á StrategyConfig ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏∏‡∏Å‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå
        2. ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏ö‡∏ö
        3. ‡∏£‡∏∞‡∏ö‡∏∏ market regime ‡πÅ‡∏•‡∏∞ session ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
        4. ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á
        """
        strategies = {}
        
        # 1. Conservative Martingale - ‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ‡πÅ‡∏ö‡∏ö‡∏£‡∏∞‡∏°‡∏±‡∏î‡∏£‡∏∞‡∏ß‡∏±‡∏á
        strategies[StrategyType.CONSERVATIVE_MARTINGALE] = StrategyConfig(
            strategy_type=StrategyType.CONSERVATIVE_MARTINGALE,
            risk_level=RiskLevel.LOW,
            base_lot_multiplier=1.0,
            max_positions=3,
            recovery_multiplier=1.3,          # ‡πÄ‡∏û‡∏¥‡πà‡∏° 30% ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏£‡∏±‡πâ‡∏á
            stop_loss_pips=30,
            take_profit_pips=15,
            max_drawdown_threshold=5.0,       # 5% max drawdown
            suitable_regimes=[MarketRegime.RANGING, MarketRegime.LOW_VOLATILITY],
            suitable_sessions=[TradingSession.ASIAN, TradingSession.QUIET],
            min_confidence=0.6,
            description="‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ‡πÅ‡∏ö‡∏ö‡∏£‡∏∞‡∏°‡∏±‡∏î‡∏£‡∏∞‡∏ß‡∏±‡∏á ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏ô‡∏≤‡∏î‡∏ô‡πâ‡∏≠‡∏¢‡πÜ ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏ï‡∏•‡∏≤‡∏î‡πÄ‡∏á‡∏µ‡∏¢‡∏ö"
        )
        
        # 2. Aggressive Grid - ‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ‡πÅ‡∏ö‡∏ö‡∏Å‡∏£‡∏¥‡∏î‡∏Å‡πâ‡∏≤‡∏ß‡∏£‡πâ‡∏≤‡∏ß
        strategies[StrategyType.AGGRESSIVE_GRID] = StrategyConfig(
            strategy_type=StrategyType.AGGRESSIVE_GRID,
            risk_level=RiskLevel.HIGH,
            base_lot_multiplier=1.2,
            max_positions=6,
            recovery_multiplier=1.8,          # ‡πÄ‡∏û‡∏¥‡πà‡∏° 80% ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏£‡∏±‡πâ‡∏á
            stop_loss_pips=None,              # ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ stop loss
            take_profit_pips=10,
            max_drawdown_threshold=15.0,      # 15% max drawdown
            suitable_regimes=[MarketRegime.RANGING, MarketRegime.HIGH_VOLATILITY],
            suitable_sessions=[TradingSession.OVERLAP, TradingSession.LONDON],
            min_confidence=0.7,
            description="‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ‡πÅ‡∏ö‡∏ö‡∏Å‡∏£‡∏¥‡∏î‡∏Å‡πâ‡∏≤‡∏ß‡∏£‡πâ‡∏≤‡∏ß ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏¢‡∏≠‡∏∞ ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏ï‡∏•‡∏≤‡∏î‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô"
        )
        
        # 3. Hedging Recovery - ‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ‡πÅ‡∏ö‡∏ö Hedge
        strategies[StrategyType.HEDGING_RECOVERY] = StrategyConfig(
            strategy_type=StrategyType.HEDGING_RECOVERY,
            risk_level=RiskLevel.MEDIUM,
            base_lot_multiplier=1.1,
            max_positions=4,
            recovery_multiplier=1.5,
            stop_loss_pips=40,
            take_profit_pips=20,
            max_drawdown_threshold=8.0,       # 8% max drawdown
            suitable_regimes=[MarketRegime.HIGH_VOLATILITY, MarketRegime.NEWS_IMPACT],
            suitable_sessions=[TradingSession.LONDON, TradingSession.NEW_YORK],
            min_confidence=0.5,
            description="‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ‡πÅ‡∏ö‡∏ö hedge ‡πÄ‡∏õ‡∏¥‡∏î‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ï‡∏£‡∏á‡∏Ç‡πâ‡∏≤‡∏° ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç"
        )
        
        # 4. Breakout Recovery - ‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ‡πÅ‡∏ö‡∏ö Breakout
        strategies[StrategyType.BREAKOUT_RECOVERY] = StrategyConfig(
            strategy_type=StrategyType.BREAKOUT_RECOVERY,
            risk_level=RiskLevel.MEDIUM,
            base_lot_multiplier=1.3,
            max_positions=3,
            recovery_multiplier=1.6,
            stop_loss_pips=25,
            take_profit_pips=50,
            max_drawdown_threshold=10.0,      # 10% max drawdown
            suitable_regimes=[MarketRegime.TRENDING_UP, MarketRegime.TRENDING_DOWN],
            suitable_sessions=[TradingSession.LONDON, TradingSession.OVERLAP],
            min_confidence=0.7,
            description="‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ‡πÅ‡∏ö‡∏ö breakout ‡∏ï‡∏≤‡∏°‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏ï‡∏•‡∏≤‡∏î‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå"
        )
        
        # 5. Mean Reversion - ‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ‡πÅ‡∏ö‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢
        strategies[StrategyType.MEAN_REVERSION] = StrategyConfig(
            strategy_type=StrategyType.MEAN_REVERSION,
            risk_level=RiskLevel.MEDIUM,
            base_lot_multiplier=1.0,
            max_positions=4,
            recovery_multiplier=1.4,
            stop_loss_pips=35,
            take_profit_pips=25,
            max_drawdown_threshold=7.0,       # 7% max drawdown
            suitable_regimes=[MarketRegime.RANGING, MarketRegime.HIGH_VOLATILITY],
            suitable_sessions=[TradingSession.ASIAN, TradingSession.NEW_YORK],
            min_confidence=0.6,
            description="‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ‡πÅ‡∏ö‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ ‡∏£‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Å‡∏•‡∏±‡∏ö‡∏ä‡πà‡∏ß‡∏á ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏ï‡∏•‡∏≤‡∏î‡πÑ‡∏ã‡∏î‡πå‡πÄ‡∏ß‡∏¢‡πå"
        )
        
        # 6. Momentum Recovery - ‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ‡πÅ‡∏ö‡∏ö Momentum
        strategies[StrategyType.MOMENTUM_RECOVERY] = StrategyConfig(
            strategy_type=StrategyType.MOMENTUM_RECOVERY,
            risk_level=RiskLevel.HIGH,
            base_lot_multiplier=1.4,
            max_positions=3,
            recovery_multiplier=2.0,          # ‡πÄ‡∏û‡∏¥‡πà‡∏° 100% ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏£‡∏±‡πâ‡∏á
            stop_loss_pips=20,
            take_profit_pips=40,
            max_drawdown_threshold=12.0,      # 12% max drawdown
            suitable_regimes=[MarketRegime.TRENDING_UP, MarketRegime.TRENDING_DOWN],
            suitable_sessions=[TradingSession.NEW_YORK, TradingSession.OVERLAP],
            min_confidence=0.8,
            description="‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ‡πÅ‡∏ö‡∏ö momentum ‡∏Ç‡∏¢‡∏≤‡∏¢‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡πÄ‡∏î‡∏¥‡∏° ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå‡πÅ‡∏Ç‡πá‡∏á"
        )
        
        # 7. News Based - ‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ‡∏ï‡∏≤‡∏°‡∏Ç‡πà‡∏≤‡∏ß
        strategies[StrategyType.NEWS_BASED] = StrategyConfig(
            strategy_type=StrategyType.NEWS_BASED,
            risk_level=RiskLevel.VERY_HIGH,
            base_lot_multiplier=0.8,          # ‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏•‡πá‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥
            max_positions=2,
            recovery_multiplier=2.5,          # ‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ‡πÄ‡∏£‡πá‡∏ß‡∏°‡∏≤‡∏Å
            stop_loss_pips=15,
            take_profit_pips=30,
            max_drawdown_threshold=20.0,      # 20% max drawdown
            suitable_regimes=[MarketRegime.NEWS_IMPACT, MarketRegime.HIGH_VOLATILITY],
            suitable_sessions=[TradingSession.LONDON, TradingSession.NEW_YORK],
            min_confidence=0.4,               # ‡∏£‡∏±‡∏ö‡∏Ç‡πà‡∏≤‡∏ß‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÅ‡∏ô‡πà‡πÉ‡∏à‡πÑ‡∏î‡πâ
            description="‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ‡∏ï‡∏≤‡∏°‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç ‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß‡πÅ‡∏•‡∏∞‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏π‡∏á"
        )
        
        # 8. Emergency Recovery - ‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô
        strategies[StrategyType.EMERGENCY_RECOVERY] = StrategyConfig(
            strategy_type=StrategyType.EMERGENCY_RECOVERY,
            risk_level=RiskLevel.VERY_LOW,
            base_lot_multiplier=0.5,          # ‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏•‡πá‡∏Å‡∏°‡∏≤‡∏Å
            max_positions=2,
            recovery_multiplier=1.2,          # ‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ‡∏ô‡πâ‡∏≠‡∏¢‡πÜ
            stop_loss_pips=50,                # Stop loss ‡∏Å‡∏ß‡πâ‡∏≤‡∏á
            take_profit_pips=10,              # Take profit ‡πÄ‡∏•‡πá‡∏Å
            max_drawdown_threshold=3.0,       # 3% max drawdown
            suitable_regimes=[MarketRegime.HIGH_VOLATILITY, MarketRegime.NEWS_IMPACT],
            suitable_sessions=list(TradingSession),  # ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏ó‡∏∏‡∏Å session
            min_confidence=0.2,               # ‡∏£‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÑ‡∏°‡πà‡πÅ‡∏ô‡πà‡πÉ‡∏à‡πÑ‡∏î‡πâ
            description="‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î ‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ß‡∏¥‡∏Å‡∏§‡∏ï"
        )
        
        return strategies

    def select_strategy(self, market_context: MarketContext, 
                       current_drawdown: float = 0.0,
                       force_strategy: Optional[StrategyType] = None) -> StrategySelection:
        """
        üéØ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏´‡∏•‡∏±‡∏Å - ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
        
        ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà:
        1. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Ç‡∏≠‡∏á‡∏ó‡∏∏‡∏Å‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå
        2. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏´‡∏•‡∏±‡∏Å‡πÅ‡∏•‡∏∞‡∏™‡∏≥‡∏£‡∏≠‡∏á
        3. ‡∏õ‡∏£‡∏±‡∏ö‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ï‡∏≤‡∏°‡∏™‡∏†‡∏≤‡∏ß‡∏∞‡∏ï‡∏•‡∏≤‡∏î
        4. ‡∏™‡∏£‡πâ‡∏≤‡∏á StrategySelection ‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå
        
        Args:
            market_context: ‡∏ú‡∏•‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏à‡∏≤‡∏Å MarketAnalyzer
            current_drawdown: Drawdown ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (%)
            force_strategy: ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡πÄ‡∏â‡∏û‡∏≤‡∏∞ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö)
        """
        try:
            print(f"üéØ Selecting strategy for {market_context.regime.value} market...")
            
            # ‡∏ñ‡πâ‡∏≤‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡πÄ‡∏â‡∏û‡∏≤‡∏∞
            if force_strategy and force_strategy in self.strategies:
                primary_strategy = self.strategies[force_strategy]
                backup_strategy = self._find_backup_strategy(primary_strategy, market_context)
                
                selection = self._create_selection_result(
                    primary_strategy, backup_strategy, market_context,
                    confidence_score=1.0, reasons=["Forced strategy selection"]
                )
                self._update_selection_history(selection)
                return selection
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ó‡∏∏‡∏Å‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå
            strategy_scores = self._calculate_all_scores(market_context, current_drawdown)
            
            # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
            sorted_strategies = sorted(strategy_scores.items(), 
                                     key=lambda x: x[1]['total_score'], reverse=True)
            
            # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏´‡∏•‡∏±‡∏Å (‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î)
            primary_type, primary_score = sorted_strategies[0]
            primary_strategy = self.strategies[primary_type]
            
            # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏™‡∏≥‡∏£‡∏≠‡∏á (‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏´‡∏•‡∏±‡∏Å)
            backup_strategy = self._find_backup_strategy(primary_strategy, market_context)
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
            confidence = min(1.0, primary_score['total_score'] / 100)
            reasons = self._generate_selection_reasons(primary_strategy, market_context, primary_score)
            warnings = self._generate_warnings(primary_strategy, market_context, current_drawdown)
            
            selection = self._create_selection_result(
                primary_strategy, backup_strategy, market_context,
                confidence, reasons, warnings
            )
            
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
            self._update_selection_history(selection)
            self.current_strategy = selection
            
            print(f"‚úÖ Selected: {primary_strategy.strategy_type.value} (confidence: {confidence:.2f})")
            return selection
            
        except Exception as e:
            print(f"‚ùå Strategy selection error: {e}")
            # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
            return self._get_safe_fallback_strategy(market_context)

    def _calculate_all_scores(self, market_context: MarketContext, 
                             current_drawdown: float) -> Dict[StrategyType, Dict]:
        """
        üìä ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ó‡∏∏‡∏Å‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå - ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå
        
        ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà:
        1. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏°‡∏¥‡∏ï‡∏¥
        2. ‡∏£‡∏ß‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ï‡∏≤‡∏° weights
        3. ‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡∏Ç‡πâ‡∏≠‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏ï‡πà‡∏≤‡∏á‡πÜ
        4. ‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
        """
        scores = {}
        
        for strategy_type, strategy in self.strategies.items():
            try:
                # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏°‡∏¥‡∏ï‡∏¥
                regime_score = self._score_regime_match(strategy, market_context)
                session_score = self._score_session_match(strategy, market_context)
                risk_score = self._score_risk_appetite(strategy, market_context, current_drawdown)
                confidence_score = self._score_confidence_level(strategy, market_context)
                performance_score = self._score_performance_history(strategy)
                
                # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°
                total_score = (
                    regime_score * self.scoring_weights['regime_match'] +
                    session_score * self.scoring_weights['session_match'] +
                    risk_score * self.scoring_weights['risk_appetite'] +
                    confidence_score * self.scoring_weights['confidence_level'] +
                    performance_score * self.scoring_weights['performance_history']
                )
                
                # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ï‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏à‡∏≥‡∏Å‡∏±‡∏î
                total_score = self._apply_constraints(total_score, strategy, market_context, current_drawdown)
                
                scores[strategy_type] = {
                    'total_score': total_score,
                    'regime_score': regime_score,
                    'session_score': session_score,
                    'risk_score': risk_score,
                    'confidence_score': confidence_score,
                    'performance_score': performance_score
                }
                
            except Exception as e:
                print(f"‚ùå Score calculation error for {strategy_type.value}: {e}")
                scores[strategy_type] = {'total_score': 0, 'error': str(e)}
        
        return scores

    def _score_regime_match(self, strategy: StrategyConfig, 
                           market_context: MarketContext) -> float:
        """
        üéØ ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö Market Regime
        
        ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà:
        - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ market regime ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏°‡∏±‡πâ‡∏¢
        - ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô 0-100 ‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
        """
        if market_context.regime in strategy.suitable_regimes:
            return 100.0
        
        # ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö regime ‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á
        compatibility_map = {
            MarketRegime.TRENDING_UP: {
                MarketRegime.TRENDING_DOWN: 30,
                MarketRegime.HIGH_VOLATILITY: 50,
                MarketRegime.RANGING: 20
            },
            MarketRegime.TRENDING_DOWN: {
                MarketRegime.TRENDING_UP: 30,
                MarketRegime.HIGH_VOLATILITY: 50,
                MarketRegime.RANGING: 20
            },
            MarketRegime.RANGING: {
                MarketRegime.LOW_VOLATILITY: 80,
                MarketRegime.HIGH_VOLATILITY: 40
            },
            MarketRegime.HIGH_VOLATILITY: {
                MarketRegime.NEWS_IMPACT: 70,
                MarketRegime.TRENDING_UP: 50,
                MarketRegime.TRENDING_DOWN: 50
            },
            MarketRegime.LOW_VOLATILITY: {
                MarketRegime.RANGING: 80,
            },
            MarketRegime.NEWS_IMPACT: {
                MarketRegime.HIGH_VOLATILITY: 70
            }
        }
        
        current_regime = market_context.regime
        if current_regime in compatibility_map:
            for suitable_regime in strategy.suitable_regimes:
                if suitable_regime in compatibility_map[current_regime]:
                    return compatibility_map[current_regime][suitable_regime]
        
        return 10.0  # ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥

    def _score_session_match(self, strategy: StrategyConfig, 
                            market_context: MarketContext) -> float:
        """
        üåè ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö Trading Session
        
        ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà:
        - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ session ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏°‡∏±‡πâ‡∏¢
        - ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô 0-100 ‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
        """
        if market_context.session in strategy.suitable_sessions:
            return 100.0
        
        # ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö session ‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á
        session_compatibility = {
            TradingSession.LONDON: {
                TradingSession.OVERLAP: 80,
                TradingSession.NEW_YORK: 60
            },
            TradingSession.NEW_YORK: {
                TradingSession.OVERLAP: 80,
                TradingSession.LONDON: 60
            },
            TradingSession.OVERLAP: {
                TradingSession.LONDON: 90,
                TradingSession.NEW_YORK: 90
            },
            TradingSession.ASIAN: {
                TradingSession.QUIET: 70
            },
            TradingSession.QUIET: {
                TradingSession.ASIAN: 70
            }
        }
        
        current_session = market_context.session
        if current_session in session_compatibility:
            for suitable_session in strategy.suitable_sessions:
                if suitable_session in session_compatibility[current_session]:
                    return session_compatibility[current_session][suitable_session]
        
        return 20.0  # ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥

    def _score_risk_appetite(self, strategy: StrategyConfig, 
                            market_context: MarketContext, 
                            current_drawdown: float) -> float:
        """
        ‚ö†Ô∏è ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á
        
        ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà:
        - ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå
        - ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ï‡∏≤‡∏° drawdown ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        - ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á
        """
        base_score = 50.0
        
        # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ï‡∏≤‡∏° drawdown ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        if abs(current_drawdown) > strategy.max_drawdown_threshold:
            # ‡∏ñ‡πâ‡∏≤ drawdown ‡πÄ‡∏Å‡∏¥‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå ‡∏•‡∏î‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
            return 10.0
        
        # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏ï‡∏•‡∏≤‡∏î
        volatility_score = market_context.volatility_score
        
        if strategy.risk_level == RiskLevel.VERY_LOW:
            # ‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ï‡πà‡∏≥‡∏°‡∏≤‡∏Å ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏ó‡∏∏‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå
            base_score = 80.0
            if volatility_score > 80:  # ‡∏ï‡∏•‡∏≤‡∏î‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô‡∏°‡∏≤‡∏Å
                base_score = 95.0  # ‡∏¢‡∏¥‡πà‡∏á‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
                
        elif strategy.risk_level == RiskLevel.LOW:
            base_score = 70.0
            if volatility_score < 40:  # ‡∏ï‡∏•‡∏≤‡∏î‡πÄ‡∏á‡∏µ‡∏¢‡∏ö
                base_score = 85.0
                
        elif strategy.risk_level == RiskLevel.MEDIUM:
            base_score = 60.0
            if 30 < volatility_score < 70:  # ‡∏ï‡∏•‡∏≤‡∏î‡∏õ‡∏Å‡∏ï‡∏¥
                base_score = 80.0
                
        elif strategy.risk_level == RiskLevel.HIGH:
            base_score = 40.0
            if volatility_score > 60:  # ‡∏ï‡∏•‡∏≤‡∏î‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô
                base_score = 75.0
            if abs(current_drawdown) > 5.0:  # ‡∏°‡∏µ drawdown ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
                base_score = 20.0  # ‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á
                
        elif strategy.risk_level == RiskLevel.VERY_HIGH:
            base_score = 30.0
            if volatility_score > 80 and market_context.confidence_score > 0.8:
                base_score = 70.0  # ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡πÅ‡∏•‡∏∞‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô‡∏™‡∏π‡∏á
            if abs(current_drawdown) > 3.0:  # ‡∏°‡∏µ drawdown ‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡πá‡∏•‡∏î‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÅ‡∏•‡πâ‡∏ß
                base_score = 10.0
        
        return min(100.0, max(0.0, base_score))

    def _score_confidence_level(self, strategy: StrategyConfig, 
                               market_context: MarketContext) -> float:
        """
        üéØ ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô
        
        ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà:
        - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ confidence ‡∏Ç‡∏≠‡∏á market analysis ‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡∏°‡∏±‡πâ‡∏¢
        - ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ï‡∏≤‡∏° min_confidence ‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå
        """
        market_confidence = market_context.confidence_score
        required_confidence = strategy.min_confidence
        
        if market_confidence >= required_confidence:
            # Confidence ‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠ ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö confidence
            return min(100.0, (market_confidence / required_confidence) * 80.0)
        else:
            # Confidence ‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠
            confidence_ratio = market_confidence / required_confidence
            return max(10.0, confidence_ratio * 50.0)

    def _score_performance_history(self, strategy: StrategyConfig) -> float:
        """
        üìà ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡πÉ‡∏ô‡∏≠‡∏î‡∏µ‡∏ï
        
        ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà:
        - ‡∏î‡∏π‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡πÉ‡∏ô‡∏≠‡∏î‡∏µ‡∏ï
        - ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ï‡∏≤‡∏°‡∏ú‡∏•‡∏á‡∏≤‡∏ô win rate, profit factor
        """
        strategy_type = strategy.strategy_type
        
        if strategy_type not in self.strategy_performance:
            return 50.0  # ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Å‡∏•‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡πÉ‡∏´‡∏°‡πà
        
        performance = self.strategy_performance[strategy_type]
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏à‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢
        win_rate = performance.get('win_rate', 0.5)
        profit_factor = performance.get('profit_factor', 1.0)
        avg_profit = performance.get('avg_profit', 0.0)
        max_drawdown = performance.get('max_drawdown', 0.0)
        
        # ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏¢‡πà‡∏≠‡∏¢
        win_rate_score = min(100, win_rate * 100)
        profit_factor_score = min(100, (profit_factor - 0.5) * 100)
        profit_score = max(0, min(100, (avg_profit + 50)))
        drawdown_score = max(0, 100 - abs(max_drawdown) * 2)
        
        # ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°
        total_score = (win_rate_score * 0.3 + 
                      profit_factor_score * 0.3 + 
                      profit_score * 0.2 + 
                      drawdown_score * 0.2)
        
        return max(10.0, min(100.0, total_score))

    def _apply_constraints(self, base_score: float, strategy: StrategyConfig, 
                          market_context: MarketContext, current_drawdown: float) -> float:
        """
        üö´ ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Å‡∏±‡∏ö‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô - ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ï‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏ï‡πà‡∏≤‡∏á‡πÜ
        
        ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà:
        - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏ó‡∏µ‡πà‡πÅ‡∏Ç‡πá‡∏á‡∏ï‡∏±‡∏ß (hard constraints)
        - ‡∏•‡∏î‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏±‡∏î‡∏≠‡∏≠‡∏Å‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
        """
        adjusted_score = base_score
        
        # ‡∏Ç‡πâ‡∏≠‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏î‡πâ‡∏≤‡∏ô drawdown
        if abs(current_drawdown) > strategy.max_drawdown_threshold:
            adjusted_score *= 0.1  # ‡∏•‡∏î‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏°‡∏≤‡∏Å
        
        # ‡∏Ç‡πâ‡∏≠‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏î‡πâ‡∏≤‡∏ô confidence
        if market_context.confidence_score < strategy.min_confidence:
            confidence_penalty = market_context.confidence_score / strategy.min_confidence
            adjusted_score *= confidence_penalty
        
        # ‡∏Ç‡πâ‡∏≠‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡πà‡∏≤‡∏ß
        if market_context.news_impact_level >= 3:  # ‡∏Ç‡πà‡∏≤‡∏ß‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏™‡∏π‡∏á
            if strategy.risk_level.value >= 4:  # ‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏π‡∏á
                adjusted_score *= 0.3  # ‡∏•‡∏î‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏°‡∏≤‡∏Å
        
        # ‡∏Ç‡πâ‡∏≠‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏î‡πâ‡∏≤‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ (‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏π‡∏á‡πÉ‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏á‡∏µ‡∏¢‡∏ö)
        if market_context.session == TradingSession.QUIET:
            if strategy.risk_level.value >= 4:
                adjusted_score *= 0.2
        
        return max(0.0, adjusted_score)

    def _find_backup_strategy(self, primary_strategy: StrategyConfig, 
                             market_context: MarketContext) -> StrategyConfig:
        """
        üîÑ ‡∏´‡∏≤‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏™‡∏≥‡∏£‡∏≠‡∏á - ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
        
        ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà:
        - ‡∏´‡∏≤‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏ï‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏´‡∏•‡∏±‡∏Å‡πÅ‡∏ï‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
        - ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô
        """
        # ‡πÑ‡∏°‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏´‡∏•‡∏±‡∏Å
        backup_candidates = [s for s in self.strategies.values() 
                           if s.strategy_type != primary_strategy.strategy_type]
        
        # ‡∏´‡∏≤‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏ó‡∏µ‡πà risk level ‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô
        preferred_risk_levels = []
        
        if primary_strategy.risk_level.value <= 2:  # ‡∏´‡∏•‡∏±‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ï‡πà‡∏≥
            preferred_risk_levels = [RiskLevel.MEDIUM, RiskLevel.HIGH]
        elif primary_strategy.risk_level.value >= 4:  # ‡∏´‡∏•‡∏±‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏π‡∏á  
            preferred_risk_levels = [RiskLevel.LOW, RiskLevel.VERY_LOW]
        else:  # ‡∏´‡∏•‡∏±‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á
            preferred_risk_levels = [RiskLevel.LOW, RiskLevel.HIGH]
        
        # ‡∏´‡∏≤‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
        best_backup = None
        best_score = 0
        
        for candidate in backup_candidates:
            score = 0
            
            # ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏´‡∏≤‡∏Å risk level ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
            if candidate.risk_level in preferred_risk_levels:
                score += 30
            
            # ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡∏±‡∏ö market regime
            if market_context.regime in candidate.suitable_regimes:
                score += 50
            
            # ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡∏±‡∏ö session
            if market_context.session in candidate.suitable_sessions:
                score += 20
            
            if score > best_score:
                best_score = score
                best_backup = candidate
        
        # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏° ‡πÉ‡∏ä‡πâ emergency recovery
        return best_backup or self.strategies[StrategyType.EMERGENCY_RECOVERY]

    def _create_selection_result(self, primary_strategy: StrategyConfig, 
                               backup_strategy: StrategyConfig,
                               market_context: MarketContext,
                               confidence_score: float,
                               reasons: List[str] = None,
                               warnings: List[str] = None) -> StrategySelection:
        """
        üìã ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå
        
        ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà:
        - ‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏õ‡πá‡∏ô StrategySelection
        - ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì risk adjustment ‡πÅ‡∏•‡∏∞ position sizing
        - ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö AI Agent
        """
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á
        risk_adjustment = self._calculate_risk_adjustment(primary_strategy, market_context)
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
        position_sizing = self._calculate_position_sizing(primary_strategy, market_context, risk_adjustment)
        
        return StrategySelection(
            primary_strategy=primary_strategy,
            backup_strategy=backup_strategy,
            confidence_score=confidence_score,
            risk_adjustment=risk_adjustment,
            position_sizing=position_sizing,
            market_context=market_context,
            selection_reasons=reasons or [],
            warnings=warnings or [],
            timestamp=datetime.now()
        )

    def _calculate_risk_adjustment(self, strategy: StrategyConfig, 
                                  market_context: MarketContext) -> float:
        """
        ‚öñÔ∏è ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á
        
        ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà:
        - ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏™‡∏†‡∏≤‡∏ß‡∏∞‡∏ï‡∏•‡∏≤‡∏î
        - ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ multiplier (0.5-2.0)
        """
        base_adjustment = 1.0
        
        # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏° volatility
        if market_context.volatility_score > 80:
            base_adjustment *= 0.7  # ‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô‡∏™‡∏π‡∏á
        elif market_context.volatility_score < 30:
            base_adjustment *= 1.3  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô‡∏ï‡πà‡∏≥
        
        # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏° confidence
        confidence_multiplier = 0.5 + (market_context.confidence_score * 1.0)
        base_adjustment *= confidence_multiplier
        
        # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏Ç‡πà‡∏≤‡∏ß
        if market_context.news_impact_level >= 3:
            base_adjustment *= 0.6  # ‡∏£‡∏∞‡∏°‡∏±‡∏î‡∏£‡∏∞‡∏ß‡∏±‡∏á‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
        
        # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏° session
        session_multipliers = {
            TradingSession.OVERLAP: 1.2,    # ‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏™‡∏π‡∏á ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡πÑ‡∏î‡πâ
            TradingSession.LONDON: 1.1,
            TradingSession.NEW_YORK: 1.0,
            TradingSession.ASIAN: 0.9,
            TradingSession.QUIET: 0.7       # ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏á‡∏µ‡∏¢‡∏ö ‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á
        }
        
        base_adjustment *= session_multipliers.get(market_context.session, 1.0)
        
        # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏ä‡πà‡∏ß‡∏á 0.5-2.0
        return max(0.5, min(2.0, base_adjustment))

    def _calculate_position_sizing(self, strategy: StrategyConfig, 
                                  market_context: MarketContext,
                                  risk_adjustment: float) -> Dict[str, float]:
        """
        üìè ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏ô‡∏≤‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
        
        ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà:
        - ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏ô‡∏≤‡∏î lot ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
        - ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏° risk adjustment
        - ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ dictionary ‡∏Ç‡∏≠‡∏á‡∏Ç‡∏ô‡∏≤‡∏î‡∏ï‡πà‡∏≤‡∏á‡πÜ
        """
        # ‡∏Ç‡∏ô‡∏≤‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏à‡∏≤‡∏Å config
        base_lot = self.base_lot_size * strategy.base_lot_multiplier
        
        # ‡∏õ‡∏£‡∏±‡∏ö‡∏î‡πâ‡∏ß‡∏¢ risk adjustment
        adjusted_base_lot = base_lot * risk_adjustment
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏ô‡∏≤‡∏î‡∏ï‡πà‡∏≤‡∏á‡πÜ
        return {
            'base_lot': max(0.01, round(adjusted_base_lot, 2)),
            'recovery_lot': max(0.01, round(adjusted_base_lot * strategy.recovery_multiplier, 2)),
            'max_total_lot': max(0.01, round(adjusted_base_lot * strategy.max_positions, 2)),
            'emergency_lot': max(0.01, round(adjusted_base_lot * 0.5, 2))
        }

    def _generate_selection_reasons(self, strategy: StrategyConfig, 
                                   market_context: MarketContext,
                                   score_details: Dict) -> List[str]:
        """
        üìù ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå
        
        ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà:
        - ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏ß‡πà‡∏≤‡∏ó‡∏≥‡πÑ‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏ô‡∏µ‡πâ
        - ‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö log ‡πÅ‡∏•‡∏∞ debug
        """
        reasons = []
        
        # ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏´‡∏•‡∏±‡∏Å
        reasons.append(f"Market regime: {market_context.regime.value}")
        reasons.append(f"Trading session: {market_context.session.value}")
        reasons.append(f"Strategy risk level: {strategy.risk_level.name}")
        
        # ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏à‡∏≤‡∏Å‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
        if score_details.get('regime_score', 0) > 80:
            reasons.append("High compatibility with current market regime")
        
        if score_details.get('session_score', 0) > 80:
            reasons.append("Optimal trading session for this strategy")
        
        if score_details.get('confidence_score', 0) > 70:
            reasons.append("High market analysis confidence")
        
        if market_context.volatility_score > 70 and strategy.risk_level.value <= 2:
            reasons.append("Conservative approach for high volatility market")
        
        return reasons

    def _generate_warnings(self, strategy: StrategyConfig, 
                          market_context: MarketContext,
                          current_drawdown: float) -> List[str]:
        """
        ‚ö†Ô∏è ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
        
        ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà:
        - ‡∏£‡∏∞‡∏ö‡∏∏‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏£‡∏∞‡∏ß‡∏±‡∏á
        - ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå
        """
        warnings = []
        
        # ‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á drawdown
        if abs(current_drawdown) > strategy.max_drawdown_threshold * 0.8:
            warnings.append("Approaching maximum drawdown threshold")
        
        # ‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á confidence
        if market_context.confidence_score < strategy.min_confidence * 1.2:
            warnings.append("Market analysis confidence is low")
        
        # ‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Ç‡πà‡∏≤‡∏ß
        if market_context.news_impact_level >= 3:
            warnings.append("High impact news expected - increased caution advised")
        
        # ‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á volatility mismatch
        if (market_context.volatility_score > 80 and 
            strategy.risk_level.value >= 4):
            warnings.append("High risk strategy in volatile market - monitor closely")
        
        # ‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á session
        if (market_context.session == TradingSession.QUIET and 
            strategy.risk_level.value >= 3):
            warnings.append("Medium/high risk strategy during quiet session")
        
        return warnings

    def _get_safe_fallback_strategy(self, market_context: MarketContext) -> StrategySelection:
        """
        üõ°Ô∏è ‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏™‡∏≥‡∏£‡∏≠‡∏á - ‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
        
        ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà:
        - ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
        - ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô
        """
        safe_strategy = self.strategies[StrategyType.EMERGENCY_RECOVERY]
        backup_strategy = self.strategies[StrategyType.CONSERVATIVE_MARTINGALE]
        
        return self._create_selection_result(
            safe_strategy, backup_strategy, market_context,
            confidence_score=0.3,
            reasons=["Fallback strategy due to error"],
            warnings=["Using emergency fallback strategy"]
        )

    def _update_selection_history(self, selection: StrategySelection):
        """
        üìö ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå
        
        ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà:
        - ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå
        - ‡πÄ‡∏Å‡πá‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
        """
        self.selection_history.append(selection)
        
        # ‡πÄ‡∏Å‡πá‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÑ‡∏ß‡πâ 100 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        if len(self.selection_history) > 100:
            self.selection_history = self.selection_history[-100:]

    def _log_available_strategies(self):
        """
        üìã ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ
        
        ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà:
        - ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        - ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö debug
        """
        print("üìã Available strategies:")
        for strategy_type, strategy in self.strategies.items():
            print(f"   - {strategy_type.value}: {strategy.description}")

    def update_strategy_performance(self, strategy_type: StrategyType, 
                                   performance_data: Dict):
        """
        üìä ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå
        
        ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà:
        - ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå
        - ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï
        """
        self.strategy_performance[strategy_type] = performance_data
        print(f"üìä Updated performance for {strategy_type.value}")

    def get_strategy_info(self, strategy_type: StrategyType) -> Dict:
        """
        üìñ ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå
        
        ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà:
        - ‡∏Ñ‡∏∑‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏î‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå
        - ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö GUI ‡∏´‡∏£‡∏∑‡∏≠ debug
        """
        if strategy_type not in self.strategies:
            return {"error": "Strategy not found"}
        
        strategy = self.strategies[strategy_type]
        return {
            "type": strategy.strategy_type.value,
            "risk_level": strategy.risk_level.name,
            "description": strategy.description,
            "base_lot_multiplier": strategy.base_lot_multiplier,
            "max_positions": strategy.max_positions,
            "recovery_multiplier": strategy.recovery_multiplier,
            "suitable_regimes": [r.value for r in strategy.suitable_regimes],
            "suitable_sessions": [s.value for s in strategy.suitable_sessions]
        }

    def get_current_strategy_status(self) -> Dict:
        """
        üìä ‡∏î‡∏π‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        
        ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà:
        - ‡∏Ñ‡∏∑‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ
        - ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö monitoring
        """
        if not self.current_strategy:
            return {"status": "No strategy selected"}
        
        strategy = self.current_strategy
        return {
            "primary_strategy": strategy.primary_strategy.strategy_type.value,
            "backup_strategy": strategy.backup_strategy.strategy_type.value,
            "confidence": strategy.confidence_score,
            "risk_adjustment": strategy.risk_adjustment,
            "position_sizing": strategy.position_sizing,
            "selected_at": strategy.timestamp.strftime("%Y-%m-%d %H:%M:%S"),
            "warnings": strategy.warnings
        }

# Helper function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢
def quick_strategy_selection(market_analyzer, mt5_interface, 
                           config: Dict = None) -> StrategySelection:
    """
    üöÄ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡πá‡∏ß
    
    Usage:
        selection = quick_strategy_selection(market_analyzer, mt5_interface)
        print(f"Selected: {selection.primary_strategy.strategy_type.value}")
    """
    # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ï‡∏•‡∏≤‡∏î
    market_context = market_analyzer.analyze_market()
    
    # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå
    selector = StrategySelector(config)
    return selector.select_strategy(market_context)