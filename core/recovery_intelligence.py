# core/recovery_intelligence.py - AI Recovery Intelligence Brain

import numpy as np
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple, Any
from dataclasses import dataclass, asdict
from enum import Enum
import json
import threading
import time

# Import ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏∑‡πà‡∏ô‡πÜ
try:
    from .market_analyzer import MarketAnalyzer, MarketContext, MarketRegime
    from .strategy_selector import StrategySelector, StrategySelection, StrategyType
except ImportError:
    from market_analyzer import MarketAnalyzer, MarketContext, MarketRegime
    from strategy_selector import StrategySelector, StrategySelection, StrategyType

class RecoveryState(Enum):
    """
    üîÑ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ - ‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏î
    """
    NORMAL = "normal"                    # ‡∏õ‡∏Å‡∏ï‡∏¥ ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ
    EARLY_RECOVERY = "early_recovery"    # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ‡∏£‡∏∞‡∏¢‡∏∞‡πÅ‡∏£‡∏Å
    ACTIVE_RECOVERY = "active_recovery"  # ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏±‡∏á
    DEEP_RECOVERY = "deep_recovery"      # ‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ‡∏•‡∏∂‡∏Å (‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏´‡∏ô‡∏±‡∏Å)
    EMERGENCY = "emergency"              # ‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô (‡πÉ‡∏ä‡πâ‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢)
    SUCCESS = "success"                  # ‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
    FAILURE = "failure"                  # ‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß

class ActionType(Enum):
    """
    ‚ö° ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥ - AI ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏±‡πà‡∏á‡πÑ‡∏î‡πâ
    """
    HOLD = 0            # ‡∏£‡∏≠‡∏î‡∏π ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£
    BUY = 1            # ‡∏ã‡∏∑‡πâ‡∏≠
    SELL = 2           # ‡∏Ç‡∏≤‡∏¢  
    CLOSE_ALL = 3      # ‡∏õ‡∏¥‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    RECOVERY_BUY = 4   # ‡∏ã‡∏∑‡πâ‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ
    RECOVERY_SELL = 5  # ‡∏Ç‡∏≤‡∏¢‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ
    HEDGE = 6          # ‡πÄ‡∏õ‡∏¥‡∏î hedge
    EMERGENCY_CLOSE = 7 # ‡∏õ‡∏¥‡∏î‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô

@dataclass
class RecoveryDecision:
    """
    üéØ ‡∏Ñ‡∏≥‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏Ç‡∏≠‡∏á AI Recovery - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏Ñ‡∏£‡∏ö‡∏ä‡∏∏‡∏î
    """
    action: ActionType                    # ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥‡∏´‡∏•‡∏±‡∏Å
    strategy_type: StrategyType          # ‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ
    volume: float                        # ‡∏Ç‡∏ô‡∏≤‡∏î lot
    entry_price: Optional[float]         # ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    stop_loss: Optional[float]           # Stop loss (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    take_profit: Optional[float]         # Take profit (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ) 
    recovery_state: RecoveryState        # ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ
    confidence: float                    # ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô (0-1)
    reasoning: List[str]                 # ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à
    warnings: List[str]                  # ‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
    market_context: MarketContext        # ‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏ï‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à
    expected_outcome: Dict[str, float]   # ‡∏ú‡∏•‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á
    risk_assessment: Dict[str, Any]      # ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á
    timestamp: datetime                  # ‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à

@dataclass
class RecoverySessionState:
    """
    üìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Recovery Session - ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ‡∏ó‡∏±‡πâ‡∏á session
    """
    session_id: str                      # ‡∏£‡∏´‡∏±‡∏™ session
    start_time: datetime                 # ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°
    initial_balance: float               # ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    current_balance: float               # ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    total_pnl: float                     # ‡∏Å‡∏≥‡πÑ‡∏£/‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏£‡∏ß‡∏°
    max_drawdown: float                  # Drawdown ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
    recovery_state: RecoveryState        # ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    current_strategy: Optional[StrategyType] # ‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    recovery_attempts: int               # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ
    successful_recoveries: int           # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
    failed_recoveries: int               # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
    total_trades: int                    # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ó‡∏£‡∏î‡∏£‡∏ß‡∏°
    winning_trades: int                  # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ó‡∏£‡∏î‡∏Å‡∏≥‡πÑ‡∏£
    losing_trades: int                   # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ó‡∏£‡∏î‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô
    active_positions: int                # ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà
    last_update: datetime                # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î

class RecoveryIntelligence:
    """
    üß† ‡∏™‡∏°‡∏≠‡∏á‡∏Å‡∏•‡∏≤‡∏á AI Recovery System - ‡∏£‡∏ß‡∏°‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
    
    ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏´‡∏•‡∏±‡∏Å:
    1. ‡∏£‡∏ß‡∏° MarketAnalyzer + StrategySelector ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
    2. ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
    3. ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ
    4. ‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡πÅ‡∏ö‡∏ö‡πÑ‡∏î‡∏ô‡∏≤‡∏°‡∏¥‡∏Å
    5. ‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö AI Agent ‡πÅ‡∏•‡∏∞ GUI
    6. ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô
    """
    
    def __init__(self, mt5_interface, config: Dict = None):
        """
        üèóÔ∏è ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Recovery Intelligence Brain
        
        ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà:
        - ‡∏™‡∏£‡πâ‡∏≤‡∏á MarketAnalyzer ‡πÅ‡∏•‡∏∞ StrategySelector
        - ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ
        - ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö monitoring
        - ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° session state
        """
        print("üß† Initializing Recovery Intelligence Brain...")
        
        self.mt5_interface = mt5_interface
        self.config = config or {}
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≠‡∏°‡πÇ‡∏û‡πÄ‡∏ô‡∏ô‡∏ï‡πå‡∏´‡∏•‡∏±‡∏Å
        self.market_analyzer = MarketAnalyzer(mt5_interface, config)
        self.strategy_selector = StrategySelector(config)
        
        # ‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ
        self.recovery_thresholds = {
            'early_recovery': self.config.get('early_recovery_threshold', -20.0),    # -$20
            'active_recovery': self.config.get('active_recovery_threshold', -50.0),  # -$50
            'deep_recovery': self.config.get('deep_recovery_threshold', -100.0),     # -$100
            'emergency': self.config.get('emergency_threshold', -200.0)              # -$200
        }
        
        # ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á
        self.max_positions = self.config.get('max_positions', 5)
        self.max_daily_loss = self.config.get('max_daily_loss', 500.0)  # $500
        self.max_drawdown_percent = self.config.get('max_drawdown_percent', 20.0)  # 20%
        
        # ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        self.current_session = None
        self.recovery_history = []
        self.decision_cache = {}
        self.last_decision = None
        
        # ‡∏£‡∏∞‡∏ö‡∏ö monitoring
        self.monitoring_active = False
        self.monitoring_thread = None
        self.update_interval = 5  # ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        
        # Performance tracking
        self.performance_metrics = {
            'total_decisions': 0,
            'successful_decisions': 0,
            'failed_decisions': 0,
            'avg_decision_time': 0.0,
            'strategy_changes': 0
        }
        
        print("‚úÖ Recovery Intelligence Brain initialized")
        self._log_system_status()

    def start_recovery_session(self, initial_balance: float = None) -> str:
        """
        üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏° Recovery Session ‡πÉ‡∏´‡∏°‡πà
        
        ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà:
        1. ‡∏™‡∏£‡πâ‡∏≤‡∏á session ‡πÉ‡∏´‡∏°‡πà
        2. ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î  
        3. ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö monitoring
        4. ‡∏Ñ‡∏∑‡∏ô session ID
        """
        try:
            # ‡∏î‡∏∂‡∏á balance ‡∏à‡∏≤‡∏Å MT5 ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏
            if initial_balance is None:
                account_info = self.mt5_interface.get_account_info()
                initial_balance = account_info.get('balance', 0.0) if account_info else 0.0
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á session ‡πÉ‡∏´‡∏°‡πà
            session_id = f"recovery_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
            
            self.current_session = RecoverySessionState(
                session_id=session_id,
                start_time=datetime.now(),
                initial_balance=initial_balance,
                current_balance=initial_balance,
                total_pnl=0.0,
                max_drawdown=0.0,
                recovery_state=RecoveryState.NORMAL,
                current_strategy=None,
                recovery_attempts=0,
                successful_recoveries=0,
                failed_recoveries=0,
                total_trades=0,
                winning_trades=0,
                losing_trades=0,
                active_positions=0,
                last_update=datetime.now()
            )
            
            # ‡πÄ‡∏£‡∏¥‡πà‡∏° monitoring
            self.start_monitoring()
            
            print(f"üöÄ Recovery session started: {session_id}")
            print(f"   Initial balance: ${initial_balance:.2f}")
            
            return session_id
            
        except Exception as e:
            print(f"‚ùå Start session error: {e}")
            return None

    def make_recovery_decision(self, current_positions: List = None, 
                              force_analysis: bool = False) -> RecoveryDecision:
        """
        üéØ ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏´‡∏•‡∏±‡∏Å - ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ
        
        ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà:
        1. ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        2. ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ
        3. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
        4. ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥
        5. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î
        
        Args:
            current_positions: ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà
            force_analysis: ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÉ‡∏´‡∏°‡πà
        """
        try:
            decision_start_time = time.time()
            print("üéØ Making recovery decision...")
            
            # 1. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ session
            self._update_session_state(current_positions)
            
            # 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î
            if self._should_stop_trading():
                return self._create_stop_trading_decision()
            
            # 3. ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ï‡∏•‡∏≤‡∏î
            market_context = self._get_market_analysis(force_analysis)
            if not market_context:
                return self._create_error_decision("Market analysis failed")
            
            # 4. ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ
            recovery_state = self._assess_recovery_state()
            
            # 5. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå
            strategy_selection = self._select_recovery_strategy(market_context, recovery_state)
            
            # 6. ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥
            action_decision = self._decide_action(strategy_selection, current_positions, recovery_state)
            
            # 7. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå
            trading_params = self._calculate_trading_parameters(action_decision, strategy_selection, market_context)
            
            # 8. ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡πÅ‡∏•‡∏∞‡∏ú‡∏•‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á
            risk_assessment = self._assess_risks(action_decision, trading_params, market_context)
            expected_outcome = self._calculate_expected_outcome(action_decision, trading_params)
            
            # 9. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
            decision = RecoveryDecision(
                action=action_decision['action'],
                strategy_type=strategy_selection.primary_strategy.strategy_type,
                volume=trading_params['volume'],
                entry_price=trading_params.get('entry_price'),
                stop_loss=trading_params.get('stop_loss'),
                take_profit=trading_params.get('take_profit'),
                recovery_state=recovery_state,
                confidence=action_decision['confidence'],
                reasoning=action_decision['reasoning'],
                warnings=action_decision['warnings'],
                market_context=market_context,
                expected_outcome=expected_outcome,
                risk_assessment=risk_assessment,
                timestamp=datetime.now()
            )
            
            # 10. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
            self.last_decision = decision
            self._update_performance_metrics(decision, time.time() - decision_start_time)
            
            print(f"‚úÖ Decision made: {decision.action.name} with {decision.strategy_type.value}")
            print(f"   Confidence: {decision.confidence:.2f}, Volume: {decision.volume}")
            
            return decision
            
        except Exception as e:
            print(f"‚ùå Decision making error: {e}")
            return self._create_error_decision(str(e))

    def _update_session_state(self, current_positions: List = None):
        """
        üìä ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Session
        
        ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà:
        1. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï balance ‡πÅ‡∏•‡∏∞ P&L
        2. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì drawdown
        3. ‡∏ô‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î
        4. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏ß‡∏•‡∏≤
        """
        try:
            if not self.current_session:
                return
                
            # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï balance
            account_info = self.mt5_interface.get_account_info()
            if account_info:
                self.current_session.current_balance = account_info.get('balance', 0.0)
                equity = account_info.get('equity', 0.0)
                
                # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì P&L
                self.current_session.total_pnl = self.current_session.current_balance - self.current_session.initial_balance
                
                # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì drawdown
                current_drawdown = min(0, self.current_session.total_pnl)
                if current_drawdown < self.current_session.max_drawdown:
                    self.current_session.max_drawdown = current_drawdown
            
            # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
            if current_positions is not None:
                self.current_session.active_positions = len(current_positions)
            else:
                positions = self.mt5_interface.get_positions() if self.mt5_interface else []
                self.current_session.active_positions = len(positions)
            
            self.current_session.last_update = datetime.now()
            
        except Exception as e:
            print(f"‚ùå Session state update error: {e}")

    def _should_stop_trading(self) -> bool:
        """
        üõë ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏ß‡∏£‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏ó‡∏£‡∏î‡∏°‡∏±‡πâ‡∏¢
        
        ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà:
        1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö daily loss limit
        2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö max drawdown
        3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏ó‡∏£‡∏î
        4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô
        """
        if not self.current_session:
            return False
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö daily loss
        if abs(self.current_session.total_pnl) >= self.max_daily_loss:
            print(f"üõë Daily loss limit reached: ${self.current_session.total_pnl:.2f}")
            return True
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö max drawdown percentage
        if self.current_session.initial_balance > 0:
            drawdown_percent = abs(self.current_session.max_drawdown) / self.current_session.initial_balance * 100
            if drawdown_percent >= self.max_drawdown_percent:
                print(f"üõë Max drawdown reached: {drawdown_percent:.1f}%")
                return True
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô
        if self.current_session.recovery_state == RecoveryState.FAILURE:
            print("üõë Recovery failure state - stopping trading")
            return True
        
        return False

    def _get_market_analysis(self, force_analysis: bool = False) -> Optional[MarketContext]:
        """
        üìä ‡∏î‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ï‡∏•‡∏≤‡∏î
        
        ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà:
        1. ‡πÉ‡∏ä‡πâ‡πÅ‡∏Ñ‡∏ä‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÉ‡∏´‡∏°‡πà
        2. ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ï‡∏•‡∏≤‡∏î‡∏ú‡πà‡∏≤‡∏ô MarketAnalyzer
        3. ‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏Ñ‡∏ä‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
        """
        try:
            cache_key = f"market_analysis_{int(time.time() // 60)}"  # ‡πÅ‡∏Ñ‡∏ä 1 ‡∏ô‡∏≤‡∏ó‡∏µ
            
            if not force_analysis and cache_key in self.decision_cache:
                return self.decision_cache[cache_key]
            
            market_context = self.market_analyzer.analyze_market()
            self.decision_cache[cache_key] = market_context
            
            return market_context
            
        except Exception as e:
            print(f"‚ùå Market analysis error: {e}")
            return None

    def _assess_recovery_state(self) -> RecoveryState:
        """
        üîç ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ
        
        ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà:
        1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö P&L ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        2. ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏ï‡πà‡∏≤‡∏á‡πÜ
        3. ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ
        """
        if not self.current_session:
            return RecoveryState.NORMAL
        
        current_pnl = self.current_session.total_pnl
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á
        if current_pnl <= self.recovery_thresholds['emergency']:
            self.current_session.recovery_state = RecoveryState.EMERGENCY
        elif current_pnl <= self.recovery_thresholds['deep_recovery']:
            self.current_session.recovery_state = RecoveryState.DEEP_RECOVERY
        elif current_pnl <= self.recovery_thresholds['active_recovery']:
            self.current_session.recovery_state = RecoveryState.ACTIVE_RECOVERY
        elif current_pnl <= self.recovery_thresholds['early_recovery']:
            self.current_session.recovery_state = RecoveryState.EARLY_RECOVERY
        else:
            # ‡∏ñ‡πâ‡∏≤ P&L ‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏ß‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏ô‡πâ‡∏≠‡∏¢
            if current_pnl >= 0:
                self.current_session.recovery_state = RecoveryState.SUCCESS
            else:
                self.current_session.recovery_state = RecoveryState.NORMAL
        
        return self.current_session.recovery_state

    def _select_recovery_strategy(self, market_context: MarketContext, 
                                 recovery_state: RecoveryState) -> StrategySelection:
        """
        üéØ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ
        
        ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà:
        1. ‡∏™‡πà‡∏á market context ‡πÉ‡∏´‡πâ StrategySelector
        2. ‡∏õ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏≤‡∏° recovery state
        3. ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô
        """
        current_drawdown = abs(self.current_session.total_pnl) if self.current_session else 0.0
        
        # ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡πÉ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏û‡∏¥‡πÄ‡∏®‡∏©
        forced_strategy = None
        
        if recovery_state == RecoveryState.EMERGENCY:
            forced_strategy = StrategyType.EMERGENCY_RECOVERY
        elif recovery_state == RecoveryState.DEEP_RECOVERY:
            # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
            if market_context.volatility_score > 80:
                forced_strategy = StrategyType.HEDGING_RECOVERY
            else:
                forced_strategy = StrategyType.CONSERVATIVE_MARTINGALE
        
        return self.strategy_selector.select_strategy(
            market_context=market_context,
            current_drawdown=current_drawdown,
            force_strategy=forced_strategy
        )

    def _decide_action(self, strategy_selection: StrategySelection, 
                      current_positions: List, recovery_state: RecoveryState) -> Dict:
        """
        ‚ö° ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥
        
        ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà:
        1. ‡πÉ‡∏ä‡πâ‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à
        2. ‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        3. ‡∏õ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥‡∏ï‡∏≤‡∏° recovery state
        4. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì confidence level
        """
        strategy = strategy_selection.primary_strategy.strategy_type
        market_context = strategy_selection.market_context
        
        reasoning = []
        warnings = []
        base_confidence = strategy_selection.confidence_score
        
        # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        num_positions = len(current_positions) if current_positions else 0
        
        # ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏ï‡∏≤‡∏° recovery state
        if recovery_state == RecoveryState.EMERGENCY:
            # ‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô - ‡∏õ‡∏¥‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏≠
            if num_positions > 0:
                action = ActionType.EMERGENCY_CLOSE
                confidence = 0.9
                reasoning.append("Emergency state - closing all positions")
            else:
                action = ActionType.HOLD
                confidence = 0.3
                reasoning.append("Emergency state - holding position")
                warnings.append("Emergency recovery state active")
        
        elif recovery_state in [RecoveryState.DEEP_RECOVERY, RecoveryState.ACTIVE_RECOVERY]:
            # ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏±‡∏á
            action = self._choose_recovery_action(strategy, market_context, num_positions)
            confidence = base_confidence * 0.8  # ‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
            reasoning.append(f"Active recovery using {strategy.value}")
            
        elif recovery_state == RecoveryState.EARLY_RECOVERY:
            # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ
            if num_positions < self.max_positions // 2:  # ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡∏Ñ‡∏£‡∏∂‡πà‡∏á
                action = self._choose_recovery_action(strategy, market_context, num_positions)
                confidence = base_confidence
                reasoning.append("Early recovery phase")
            else:
                action = ActionType.HOLD
                confidence = base_confidence * 0.6
                reasoning.append("Too many positions - holding")
                
        elif recovery_state == RecoveryState.SUCCESS:
            # ‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - ‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡∏õ‡∏¥‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ó‡∏£‡∏î‡∏ï‡πà‡∏≠
            if num_positions > 0 and market_context.confidence_score < 0.6:
                action = ActionType.CLOSE_ALL
                confidence = 0.8
                reasoning.append("Recovery successful - taking profits")
            else:
                action = self._choose_normal_action(strategy, market_context)
                confidence = base_confidence
                reasoning.append("Recovery successful - normal trading")
        
        else:  # NORMAL
            # ‡πÄ‡∏ó‡∏£‡∏î‡∏õ‡∏Å‡∏ï‡∏¥
            action = self._choose_normal_action(strategy, market_context)
            confidence = base_confidence
            reasoning.append("Normal trading mode")
        
        return {
            'action': action,
            'confidence': confidence,
            'reasoning': reasoning,
            'warnings': warnings
        }

    def _choose_recovery_action(self, strategy: StrategyType, 
                               market_context: MarketContext, 
                               num_positions: int) -> ActionType:
        """
        üîÑ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ
        
        ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà:
        - ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ
        - ‡πÉ‡∏ä‡πâ strategy ‡πÅ‡∏•‡∏∞ market context ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à
        """
        # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏¢‡∏≠‡∏∞‡πÅ‡∏•‡πâ‡∏ß ‡∏≠‡∏≤‡∏à‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏¥‡∏î‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô
        if num_positions >= self.max_positions:
            return ActionType.CLOSE_ALL
        
        # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏≤‡∏° strategy type
        if strategy == StrategyType.HEDGING_RECOVERY:
            # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö hedge - ‡πÄ‡∏õ‡∏¥‡∏î‡∏ï‡∏£‡∏á‡∏Ç‡πâ‡∏≤‡∏°
            return ActionType.HEDGE
        
        elif strategy == StrategyType.AGGRESSIVE_GRID:
            # Grid strategy - ‡πÄ‡∏õ‡∏¥‡∏î‡∏ï‡∏≤‡∏° trend
            if market_context.trend_strength > 0:
                return ActionType.RECOVERY_BUY
            else:
                return ActionType.RECOVERY_SELL
        
        elif strategy == StrategyType.MEAN_REVERSION:
            # Mean reversion - ‡πÄ‡∏õ‡∏¥‡∏î‡∏ï‡∏£‡∏á‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏±‡∏ö trend
            if market_context.trend_strength > 0:
                return ActionType.RECOVERY_SELL
            else:
                return ActionType.RECOVERY_BUY
        
        elif strategy == StrategyType.BREAKOUT_RECOVERY:
            # Breakout - ‡∏ï‡∏≤‡∏° momentum
            if market_context.volatility_score > 60:
                if market_context.trend_strength > 30:
                    return ActionType.RECOVERY_BUY
                elif market_context.trend_strength < -30:
                    return ActionType.RECOVERY_SELL
        
        elif strategy == StrategyType.MOMENTUM_RECOVERY:
            # Momentum - ‡∏Ç‡∏¢‡∏≤‡∏¢‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡πÄ‡∏î‡∏¥‡∏°
            if market_context.trend_strength > 40:
                return ActionType.RECOVERY_BUY
            elif market_context.trend_strength < -40:
                return ActionType.RECOVERY_SELL
        
        # Default - conservative approach
        return ActionType.HOLD

    def _choose_normal_action(self, strategy: StrategyType, 
                             market_context: MarketContext) -> ActionType:
        """
        üìà ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥‡∏õ‡∏Å‡∏ï‡∏¥ (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ)
        
        ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà:
        - ‡πÄ‡∏ó‡∏£‡∏î‡∏õ‡∏Å‡∏ï‡∏¥‡∏ï‡∏≤‡∏°‡∏™‡∏†‡∏≤‡∏ß‡∏∞‡∏ï‡∏•‡∏≤‡∏î
        - ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ
        """
        # ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏ï‡∏≤‡∏° market regime
        if market_context.regime.name == 'TRENDING_UP' and market_context.confidence_score > 0.7:
            return ActionType.BUY
        elif market_context.regime.name == 'TRENDING_DOWN' and market_context.confidence_score > 0.7:
            return ActionType.SELL
        elif market_context.confidence_score < 0.4:
            return ActionType.HOLD
        elif market_context.volatility_score > 80:
            # ‡∏ï‡∏•‡∏≤‡∏î‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô‡∏™‡∏π‡∏á - ‡∏£‡∏≠‡∏î‡∏π
            return ActionType.HOLD
        else:
            # ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏ï‡∏≤‡∏° trend strength
            if market_context.trend_strength > 60:
                return ActionType.BUY
            elif market_context.trend_strength < -60:
                return ActionType.SELL
            else:
                return ActionType.HOLD

    def _calculate_trading_parameters(self, action_decision: Dict, 
                                     strategy_selection: StrategySelection,
                                     market_context: MarketContext) -> Dict:
        """
        üìä ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î
        
        ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà:
        1. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏ô‡∏≤‡∏î lot
        2. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì stop loss ‡πÅ‡∏•‡∏∞ take profit
        3. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤
        4. ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏° recovery state
        """
        try:
            params = {}
            action = action_decision['action']
            strategy = strategy_selection.primary_strategy
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏ô‡∏≤‡∏î lot
            base_volume = strategy_selection.position_sizing['base_lot']
            
            if action in [ActionType.RECOVERY_BUY, ActionType.RECOVERY_SELL]:
                # ‡πÉ‡∏ä‡πâ recovery volume
                params['volume'] = strategy_selection.position_sizing['recovery_lot']
            elif action == ActionType.HEDGE:
                # ‡∏Ç‡∏ô‡∏≤‡∏î‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö hedge
                params['volume'] = strategy_selection.position_sizing['base_lot'] * 1.5
            else:
                # ‡∏Ç‡∏ô‡∏≤‡∏î‡∏õ‡∏Å‡∏ï‡∏¥
                params['volume'] = base_volume
            
            # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
            max_volume = self.config.get('max_lot_size', 0.10)
            params['volume'] = min(params['volume'], max_volume)
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì stop loss ‡πÅ‡∏•‡∏∞ take profit
            if strategy.stop_loss_pips:
                params['stop_loss_pips'] = strategy.stop_loss_pips
            
            if strategy.take_profit_pips:
                params['take_profit_pips'] = strategy.take_profit_pips
            
            # ‡∏õ‡∏£‡∏±‡∏ö SL/TP ‡∏ï‡∏≤‡∏° volatility
            volatility_multiplier = 1.0
            if market_context.volatility_score > 80:
                volatility_multiplier = 1.5  # ‡πÄ‡∏û‡∏¥‡πà‡∏° SL/TP ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô‡∏™‡∏π‡∏á
            elif market_context.volatility_score < 30:
                volatility_multiplier = 0.7  # ‡∏•‡∏î SL/TP ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô‡∏ï‡πà‡∏≥
            
            if 'stop_loss_pips' in params:
                params['stop_loss_pips'] = int(params['stop_loss_pips'] * volatility_multiplier)
            if 'take_profit_pips' in params:
                params['take_profit_pips'] = int(params['take_profit_pips'] * volatility_multiplier)
            
            return params
            
        except Exception as e:
            print(f"‚ùå Trading parameters calculation error: {e}")
            return {'volume': 0.01, 'stop_loss_pips': 30, 'take_profit_pips': 15}

    def _assess_risks(self, action_decision: Dict, trading_params: Dict, 
                     market_context: MarketContext) -> Dict[str, Any]:
        """
        ‚ö†Ô∏è ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á
        
        ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà:
        1. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à
        2. ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô worst case scenario
        3. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì risk/reward ratio
        """
        try:
            risk_assessment = {}
            
            # ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
            volume = trading_params.get('volume', 0.01)
            sl_pips = trading_params.get('stop_loss_pips', 30)
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Gold)
            risk_amount = volume * sl_pips * 100  # $1 per pip per 0.01 lot
            
            risk_assessment['position_risk'] = risk_amount
            risk_assessment['risk_percentage'] = (risk_amount / self.current_session.current_balance * 100) if self.current_session else 0
            
            # ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ï‡∏•‡∏≤‡∏î
            market_risk = 'LOW'
            if market_context.volatility_score > 80:
                market_risk = 'HIGH'
            elif market_context.volatility_score > 60:
                market_risk = 'MEDIUM'
            
            risk_assessment['market_risk'] = market_risk
            risk_assessment['volatility_score'] = market_context.volatility_score
            risk_assessment['confidence_score'] = market_context.confidence_score
            
            # ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡∏Ç‡πà‡∏≤‡∏ß
            news_risk = 'LOW'
            if market_context.news_impact_level >= 3:
                news_risk = 'HIGH'
            elif market_context.news_impact_level >= 2:
                news_risk = 'MEDIUM'
            
            risk_assessment['news_risk'] = news_risk
            
            # Risk/Reward ratio
            tp_pips = trading_params.get('take_profit_pips', 15)
            if sl_pips > 0:
                risk_assessment['risk_reward_ratio'] = tp_pips / sl_pips
            else:
                risk_assessment['risk_reward_ratio'] = 0
            
            # Overall risk level
            risk_factors = 0
            if market_risk == 'HIGH': risk_factors += 2
            elif market_risk == 'MEDIUM': risk_factors += 1
            
            if news_risk == 'HIGH': risk_factors += 2
            elif news_risk == 'MEDIUM': risk_factors += 1
            
            if market_context.confidence_score < 0.5: risk_factors += 1
            if risk_assessment['risk_percentage'] > 5: risk_factors += 1
            
            if risk_factors >= 4:
                overall_risk = 'VERY_HIGH'
            elif risk_factors >= 3:
                overall_risk = 'HIGH'
            elif risk_factors >= 2:
                overall_risk = 'MEDIUM'
            else:
                overall_risk = 'LOW'
            
            risk_assessment['overall_risk'] = overall_risk
            risk_assessment['risk_factors_count'] = risk_factors
            
            return risk_assessment
            
        except Exception as e:
            print(f"‚ùå Risk assessment error: {e}")
            return {'overall_risk': 'UNKNOWN', 'position_risk': 0}

    def _calculate_expected_outcome(self, action_decision: Dict, 
                                   trading_params: Dict) -> Dict[str, float]:
        """
        üéØ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ú‡∏•‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á
        
        ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà:
        1. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏≥‡πÑ‡∏£/‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á
        2. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏•
        3. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì expected value
        """
        try:
            expected = {}
            
            volume = trading_params.get('volume', 0.01)
            sl_pips = trading_params.get('stop_loss_pips', 30)
            tp_pips = trading_params.get('take_profit_pips', 15)
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏≥‡πÑ‡∏£/‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏á‡∏¥‡∏ô
            max_loss = -(volume * sl_pips * 100) if sl_pips else 0
            max_profit = volume * tp_pips * 100 if tp_pips else 0
            
            expected['max_profit'] = max_profit
            expected['max_loss'] = max_loss
            
            # ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô (‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢)
            confidence = action_decision.get('confidence', 0.5)
            
            # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏ô‡∏∞ = confidence ‡∏õ‡∏£‡∏±‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏ï‡πà‡∏≤‡∏á‡πÜ
            win_probability = confidence * 0.6  # Base 60% ‡∏Ç‡∏≠‡∏á confidence
            
            expected['win_probability'] = win_probability
            expected['loss_probability'] = 1 - win_probability
            
            # Expected value
            expected_value = (max_profit * win_probability) + (max_loss * (1 - win_probability))
            expected['expected_value'] = expected_value
            
            return expected
            
        except Exception as e:
            print(f"‚ùå Expected outcome calculation error: {e}")
            return {'expected_value': 0, 'max_profit': 0, 'max_loss': 0}

    def _create_stop_trading_decision(self) -> RecoveryDecision:
        """
        üõë ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏ó‡∏£‡∏î
        """
        return RecoveryDecision(
            action=ActionType.HOLD,
            strategy_type=StrategyType.EMERGENCY_RECOVERY,
            volume=0.0,
            entry_price=None,
            stop_loss=None,
            take_profit=None,
            recovery_state=RecoveryState.FAILURE,
            confidence=0.1,
            reasoning=["Trading stopped due to risk limits"],
            warnings=["Risk limits exceeded - trading halted"],
            market_context=None,
            expected_outcome={},
            risk_assessment={'overall_risk': 'EXTREME'},
            timestamp=datetime.now()
        )

    def _create_error_decision(self, error_message: str) -> RecoveryDecision:
        """
        ‚ùå ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
        """
        return RecoveryDecision(
            action=ActionType.HOLD,
            strategy_type=StrategyType.EMERGENCY_RECOVERY,
            volume=0.0,
            entry_price=None,
            stop_loss=None,
            take_profit=None,
            recovery_state=RecoveryState.NORMAL,
            confidence=0.0,
            reasoning=[f"Error occurred: {error_message}"],
            warnings=["System error - holding position"],
            market_context=None,
            expected_outcome={},
            risk_assessment={'overall_risk': 'UNKNOWN'},
            timestamp=datetime.now()
        )

    def start_monitoring(self):
        """
        üì° ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö monitoring
        
        ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà:
        1. ‡πÄ‡∏£‡∏¥‡πà‡∏° background thread
        2. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏∞‡∏¢‡∏∞
        3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô
        """
        if self.monitoring_active:
            return
            
        self.monitoring_active = True
        
        def monitoring_loop():
            while self.monitoring_active:
                try:
                    # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
                    if self.current_session:
                        self._update_session_state()
                        
                        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô
                        if self._should_stop_trading():
                            print("üö® Emergency condition detected!")
                            # ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏° callback ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
                    
                    time.sleep(self.update_interval)
                    
                except Exception as e:
                    print(f"‚ùå Monitoring error: {e}")
                    time.sleep(10)  # ‡∏£‡∏≠‡∏ô‡∏≤‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
        
        self.monitoring_thread = threading.Thread(target=monitoring_loop, daemon=True)
        self.monitoring_thread.start()
        
        print("üì° Recovery monitoring started")

    def stop_monitoring(self):
        """
        ‚èπÔ∏è ‡∏´‡∏¢‡∏∏‡∏î‡∏£‡∏∞‡∏ö‡∏ö monitoring
        """
        self.monitoring_active = False
        if self.monitoring_thread:
            self.monitoring_thread.join(timeout=5)
        print("üì° Recovery monitoring stopped")

    def _update_performance_metrics(self, decision: RecoveryDecision, decision_time: float):
        """
        üìä ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï performance metrics
        
        ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà:
        - ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à
        - ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢
        - ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ú‡∏•‡∏á‡∏≤‡∏ô
        """
        self.performance_metrics['total_decisions'] += 1
        
        # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à
        current_avg = self.performance_metrics['avg_decision_time']
        total_decisions = self.performance_metrics['total_decisions']
        
        new_avg = ((current_avg * (total_decisions - 1)) + decision_time) / total_decisions
        self.performance_metrics['avg_decision_time'] = new_avg

    def get_system_status(self) -> Dict:
        """
        üìä ‡∏î‡∏π‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        
        ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà:
        - ‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        - ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö GUI ‡πÅ‡∏•‡∏∞ monitoring
        """
        try:
            status = {
                'timestamp': datetime.now(),
                'monitoring_active': self.monitoring_active,
                'session': None,
                'last_decision': None,
                'performance': self.performance_metrics
            }
            
            # Session status
            if self.current_session:
                status['session'] = {
                    'id': self.current_session.session_id,
                    'start_time': self.current_session.start_time,
                    'duration_minutes': (datetime.now() - self.current_session.start_time).total_seconds() / 60,
                    'initial_balance': self.current_session.initial_balance,
                    'current_balance': self.current_session.current_balance,
                    'total_pnl': self.current_session.total_pnl,
                    'max_drawdown': self.current_session.max_drawdown,
                    'recovery_state': self.current_session.recovery_state.value,
                    'current_strategy': self.current_session.current_strategy.value if self.current_session.current_strategy else None,
                    'total_trades': self.current_session.total_trades,
                    'win_rate': (self.current_session.winning_trades / max(1, self.current_session.total_trades)) * 100,
                    'active_positions': self.current_session.active_positions
                }
            
            # Last decision status
            if self.last_decision:
                status['last_decision'] = {
                    'action': self.last_decision.action.name,
                    'strategy': self.last_decision.strategy_type.value,
                    'confidence': self.last_decision.confidence,
                    'recovery_state': self.last_decision.recovery_state.value,
                    'timestamp': self.last_decision.timestamp,
                    'warnings': self.last_decision.warnings
                }
            
            return status
            
        except Exception as e:
            print(f"‚ùå Get system status error: {e}")
            return {'error': str(e), 'timestamp': datetime.now()}

    def get_recovery_summary(self) -> str:
        """
        üìã ‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏ö‡∏ö‡∏¢‡πà‡∏≠
        
        ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà:
        - ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡πâ‡∏ô‡πÜ
        - ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö log
        """
        try:
            if not self.current_session:
                return "üîÑ No active recovery session"
            
            session = self.current_session
            
            summary = (f"üß† Recovery: {session.recovery_state.value.upper()} | "
                      f"P&L: ${session.total_pnl:.2f} | "
                      f"DD: ${session.max_drawdown:.2f} | "
                      f"Trades: {session.total_trades} | "
                      f"Positions: {session.active_positions}")
            
            if self.last_decision:
                summary += f" | Last: {self.last_decision.action.name}"
            
            return summary
            
        except Exception as e:
            return f"‚ùå Summary error: {e}"

    def _log_system_status(self):
        """
        üìã ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö
        """
        print("üìã Recovery Intelligence Brain Status:")
        print(f"   - Market Analyzer: Ready")
        print(f"   - Strategy Selector: Ready (8 strategies)")
        print(f"   - Recovery Thresholds:")
        print(f"     * Early: ${self.recovery_thresholds['early_recovery']}")
        print(f"     * Active: ${self.recovery_thresholds['active_recovery']}")
        print(f"     * Deep: ${self.recovery_thresholds['deep_recovery']}")
        print(f"     * Emergency: ${self.recovery_thresholds['emergency']}")
        print(f"   - Risk Limits:")
        print(f"     * Max Daily Loss: ${self.max_daily_loss}")
        print(f"     * Max Drawdown: {self.max_drawdown_percent}%")
        print(f"     * Max Positions: {self.max_positions}")

    def end_session(self) -> Dict:
        """
        üèÅ ‡∏à‡∏ö Recovery Session
        
        ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà:
        1. ‡∏´‡∏¢‡∏∏‡∏î monitoring
        2. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
        3. ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏á‡∏≤‡∏ô
        4. ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
        """
        try:
            if not self.current_session:
                return {'error': 'No active session'}
            
            # ‡∏´‡∏¢‡∏∏‡∏î monitoring
            self.stop_monitoring()
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏á‡∏≤‡∏ô
            session_summary = {
                'session_id': self.current_session.session_id,
                'start_time': self.current_session.start_time,
                'end_time': datetime.now(),
                'duration_hours': (datetime.now() - self.current_session.start_time).total_seconds() / 3600,
                'initial_balance': self.current_session.initial_balance,
                'final_balance': self.current_session.current_balance,
                'total_pnl': self.current_session.total_pnl,
                'max_drawdown': self.current_session.max_drawdown,
                'total_trades': self.current_session.total_trades,
                'win_rate': (self.current_session.winning_trades / max(1, self.current_session.total_trades)) * 100,
                'recovery_attempts': self.current_session.recovery_attempts,
                'successful_recoveries': self.current_session.successful_recoveries,
                'final_state': self.current_session.recovery_state.value
            }
            
            # ‡πÄ‡∏Å‡πá‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
            self.recovery_history.append(session_summary)
            
            # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
            self.current_session = None
            self.last_decision = None
            
            print(f"üèÅ Recovery session ended")
            print(f"   Final P&L: ${session_summary['total_pnl']:.2f}")
            print(f"   Win Rate: {session_summary['win_rate']:.1f}%")
            
            return session_summary
            
        except Exception as e:
            print(f"‚ùå End session error: {e}")
            return {'error': str(e)}

    def force_strategy_change(self, new_strategy: StrategyType, reason: str = "Manual override"):
        """
        üîÑ ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå
        
        ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà:
        - ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏Ç‡∏∂‡πâ‡∏ô‡∏Å‡∏±‡∏ö market analysis
        - ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏£‡∏ì‡∏µ‡∏û‡∏¥‡πÄ‡∏®‡∏©
        """
        if self.current_session:
            old_strategy = self.current_session.current_strategy
            self.current_session.current_strategy = new_strategy
            self.performance_metrics['strategy_changes'] += 1
            
            print(f"üîÑ Strategy changed: {old_strategy} ‚Üí {new_strategy.value}")
            print(f"   Reason: {reason}")

    def get_strategy_performance_report(self) -> Dict:
        """
        üìä ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå
        
        ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà:
        - ‡∏™‡∏£‡∏∏‡∏õ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå
        - ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏£‡∏∞‡∏ö‡∏ö
        """
        try:
            report = {
                'total_sessions': len(self.recovery_history),
                'current_session': None,
                'strategy_usage': {},
                'success_rates': {},
                'avg_performance': {}
            }
            
            # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• current session
            if self.current_session:
                report['current_session'] = {
                    'state': self.current_session.recovery_state.value,
                    'pnl': self.current_session.total_pnl,
                    'trades': self.current_session.total_trades,
                    'strategy': self.current_session.current_strategy.value if self.current_session.current_strategy else None
                }
            
            # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
            strategy_stats = {}
            for session in self.recovery_history:
                final_state = session.get('final_state', 'unknown')
                # Note: ‡πÉ‡∏ô‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏Å‡πá‡∏ö strategy ‡πÉ‡∏ô history
                # ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï
            
            report['performance_metrics'] = self.performance_metrics
            
            return report
            
        except Exception as e:
            print(f"‚ùå Performance report error: {e}")
            return {'error': str(e)}

    def update_strategy_feedback(self, strategy_type: StrategyType, 
                                performance_data: Dict):
        """
        üìà ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ú‡∏•‡∏ï‡∏≠‡∏ö‡∏£‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå
        
        ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà:
        - ‡∏£‡∏±‡∏ö feedback ‡∏à‡∏≤‡∏Å‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î
        - ‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏¢‡∏±‡∏á StrategySelector
        - ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï
        """
        try:
            self.strategy_selector.update_strategy_performance(
                strategy_type, performance_data
            )
            
            print(f"üìà Strategy feedback updated for {strategy_type.value}")
            print(f"   Performance data: {performance_data}")
            
        except Exception as e:
            print(f"‚ùå Strategy feedback error: {e}")

    def get_market_insights(self) -> Dict:
        """
        üí° ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ï‡∏•‡∏≤‡∏î
        
        ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà:
        - ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• market analysis ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        - ‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢
        - ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö GUI display
        """
        try:
            market_context = self.market_analyzer.analyze_market()
            
            insights = {
                'market_regime': market_context.regime.value,
                'trading_session': market_context.session.value,
                'volatility_level': self._classify_volatility(market_context.volatility_score),
                'trend_direction': self._classify_trend(market_context.trend_strength),
                'confidence_level': self._classify_confidence(market_context.confidence_score),
                'recommended_strategies': market_context.recommended_strategies[:3],
                'warnings': [],
                'opportunities': []
            }
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡πÇ‡∏≠‡∏Å‡∏≤‡∏™
            if market_context.volatility_score > 80:
                insights['warnings'].append("High volatility - increased risk")
            
            if market_context.confidence_score > 0.8:
                insights['opportunities'].append("High confidence signals")
            
            if market_context.news_impact_level >= 3:
                insights['warnings'].append("High impact news expected")
            
            return insights
            
        except Exception as e:
            print(f"‚ùå Market insights error: {e}")
            return {'error': str(e)}

    def _classify_volatility(self, score: float) -> str:
        """‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô"""
        if score > 80: return "Very High"
        elif score > 60: return "High"
        elif score > 40: return "Medium"
        elif score > 20: return "Low"
        else: return "Very Low"

    def _classify_trend(self, strength: float) -> str:
        """‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå"""
        if strength > 60: return "Strong Bullish"
        elif strength > 20: return "Weak Bullish"
        elif strength > -20: return "Sideways"
        elif strength > -60: return "Weak Bearish"
        else: return "Strong Bearish"

    def _classify_confidence(self, confidence: float) -> str:
        """‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô"""
        if confidence > 0.8: return "Very High"
        elif confidence > 0.6: return "High"
        elif confidence > 0.4: return "Medium"
        elif confidence > 0.2: return "Low"
        else: return "Very Low"

# Helper functions ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢
def create_recovery_brain(mt5_interface, config: Dict = None) -> RecoveryIntelligence:
    """
    üöÄ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á Recovery Brain
    
    Usage:
        brain = create_recovery_brain(mt5_interface, config)
        session_id = brain.start_recovery_session()
        decision = brain.make_recovery_decision(current_positions)
    """
    return RecoveryIntelligence(mt5_interface, config)

def quick_recovery_decision(mt5_interface, config: Dict = None, 
                          current_positions: List = None) -> RecoveryDecision:
    """
    ‚ö° ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡πá‡∏ß
    
    Usage:
        decision = quick_recovery_decision(mt5_interface, config, positions)
        print(f"Action: {decision.action.name}, Strategy: {decision.strategy_type.value}")
    """
    brain = RecoveryIntelligence(mt5_interface, config)
    brain.start_recovery_session()
    return brain.make_recovery_decision(current_positions)

# Example usage and testing functions
if __name__ == "__main__":
    # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö)
    print("üß† Recovery Intelligence Brain - Example Usage")
    print("This module requires MT5 interface to run properly")
    print("Import this module and use create_recovery_brain() function")